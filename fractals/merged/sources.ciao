%%% -*- mode: prolog -*-
%%% $Id: ackermann.ciao,v 1.3 2005-05-13 06:04:08 igouy-guest Exp $
%%% http://shootout.alioth.debian.org/

:- module(ackermann,[main/1],[]).

:- use_module(library(write)).

ack(0,N,Val) :- Val is N + 1.
ack(M,0,Val) :- M > 0, M1 is M - 1, ack(M1,1,Val).
ack(M,N,Val) :- M > 0, N > 0, M1 is M - 1, N1 is N - 1,
		ack(M, N1, Val1), ack(M1, Val1, Val).

run_list([Arg|Args]) :-
	name(Arg,ArgStr), name(ArgN,ArgStr),
	ack(3,ArgN,Val), write('Ack(3,'), write(ArgN),
	write('): '), write(Val), nl.

main(Argv) :-
	run_list(Argv), halt.

%%% -*- mode: prolog -*-
%%% $Id: fibo.ciao,v 1.4 2005-04-25 19:01:38 igouy-guest Exp $
%%% http://shootout.alioth.debian.org/
:- module(fibo,[main/1]).

:- use_module(library(write)).

fibo(0,1).
fibo(1,1).
fibo(N,Val) :- N > 0, N1 is N - 1, fibo(N1,Val1),
		N2 is N - 2, fibo(N2,Val2),
		Val is Val1 + Val2.

run_list([Arg|Args]) :-
	name(Arg,ArgStr), name(ArgN,ArgStr),
	fibo(ArgN,Val),
	write(Val), nl, halt.

main(Argv) :-
	run_list(Argv).

%%% -*- mode: prolog -*-
%%% $Id: hello.ciao,v 1.2 2004-07-01 05:23:59 bfulgham Exp $
%%% http://shootout.alioth.debian.org/
:- module(hello,[main/0],[]).

:- use_module(library(write)).

main :-
	write('hello world'), nl, halt.

%%% -*- mode: prolog -*-
%%% $Id: sieve.ciao,v 1.2 2005-05-13 16:24:19 igouy-guest Exp $
%%% http://shootout.alioth.debian.org/ 
%%%
%%% Based on a program by Jim Montgomery
%%%
:- module(sieve, [main/1]).
:- use_module(library(write)).

%%% integers
%%%    Generates a list of integers from Low to High
integers(_,_,[]).
integers(Low,Limit,[Low|Rest]) :-
    Low =< Limit,
    !, CurrInt is Low+1,
    integers(CurrInt,Limit,Rest).

%%% sieve
%%%    Selects smallest remaining number in list (it is prime) and then
%%%    removes all multiples of this prime from the list
sieve([],[]).
sieve([Head|Tail],[Head|Primes]) :-
    remove(Head,Tail,New),
    sieve(New,Primes).

%%% remove
%%    Remove all multiples of the current prime number from list
remove(Prime,[],[]).
remove(Prime,[H|Tail],[Head|Val]) :-
    \+(0 is Head mod Prime),
    !, remove(Prime,Tail,Val).
remove(Prime,[Head|Tail],Val) :-
    0 is Head mod Prime,
    !, remove(Prime,Tail,Val).

%%% loop
%%%%    loop construct to do this task Count times
loop(_,0,_).
loop(Limit,Count,List) :-
    Current is Count - 1,
    integers(2,Limit,Integers),
    sieve(Integers,List),
    loop(Limit,Current,List).

%%% run_list
%%%    program driver
run_list([Arg|Args]) :-
	name(Arg,ArgStr), name(ArgN,ArgStr),
	loop(8192,ArgN,List),
	length(List,Val),
	write('Count: '),
	write(Val), nl, halt.

%%% main
%%%    program driver
main(Argv) :-
	run_list(Argv).
	
