/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Nicolas Cannasse
*/
make = function(i,d) {
	if( d == 0 ) return $array(i,null,null);
	var i2 = 2 * i;
	d -= 1;
	$array(i,make(i2-1,d),make(i2,d));
};

check = function(n) {
	if( n[1] == null ) return n[0];
	return n[0] + check(n[1]) - check(n[2]);
}

var arg = $int($loader.args[0]);
if( arg == null ) arg = 10;
var min_depth = 4;
var max_depth = if( min_depth + 2 < arg ) arg else min_depth + 2;
var stretch_depth = max_depth + 1

var c = check(make(0,stretch_depth));
$print("stretch tree of depth ",stretch_depth,"\t check: ",c,"\n");

var long_lived_tree = make(0,max_depth);

loop_depths = function(d) {
	if( d <= max_depth ) {
		var niter = 1 << (max_depth - d + min_depth);
		var c = 0;
		var i = 0;
		while( i < niter ) {
			i += 1;
			c += check(make(i,d))+check(make(0-i,d));
		}
		$print(2*niter,"\t trees of depth ",d,"\t check: ",c,"\n");
		loop_depths(d + 2);
	}
}

loop_depths(min_depth);
$print("long lived tree of depth ",max_depth,"\t check: ",check(long_lived_tree),"\n");
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Nicolas Cannasse
*/
var n = $int($loader.args[0]);
if( n == null ) n = 7;

check = 0;
perm = $amake(n);
perm1 = $amake(n);
count = $amake(n);
maxPerm = $amake(n);
maxflips = 0;
m = n - 1;
r = n;
i = 0;
while( i < n ) { perm1[i] = i; i += 1 };

while (true) {
	if( check < 30 ) {
		i = 0;
		while( i < n ) { $print(perm1[i]+1); i += 1; };
		$print("\n");
		check += 1;
	}
	while( r != 1 ) { count[r-1] = r; r -= 1; };
	if( perm1[0] != 0 && perm1[m] != m ) {
		i = 0;
		while( i < n ) { perm[i] = perm1[i]; i += 1; };
		flips = 0;
		k = perm[0];
		do {
			i = 1;
			j = k - 1;
			while( i < j ) {
				tmp = perm[i];
				perm[i] = perm[j];
				perm[j] = tmp;
				i += 1;
				j -= 1;
			}
			flips += 1;
			j = perm[k];
			perm[k] = k;
			k = j;
		} while( k != 0 );
		if( flips > maxflips )
			maxflips = flips;
	}
	while (true) {
		if( r == n ) {
			$print("Pfannkuchen(",n,") = ",maxflips,"\n");
			$goto(exit);
		}
		perm0 = perm1[0];
		i = 0;
		while( i < r ) {
			j = i + 1;
			perm1[i] = perm1[j];
			i = j;
		}
		perm1[r] = perm0;
		count[r] -= 1;
		if( count[r] > 0 ) break;
		r += 1;
	}
}
exit:
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Nicolas Cannasse
*/
$print("hello world\n");
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Nicolas Cannasse
*/
pi = 3.141592653589793;
solar_mass = (4 * pi * pi);
days_per_year = 365.24;

sqrt = $loader.loadprim("std@math_sqrt",1);
round = $loader.loadprim("std@math_round",1);

advance = function(nbodies,bodies,dt) {
	var i = 0,j;
	while( i < nbodies ) {
		var b = bodies[i];
		i += 1;
		j = i;
		while( j < nbodies ) {
			var b2 = bodies[j];
			var dx = b.x - b2.x;
			var dy = b.y - b2.y;
			var dz = b.z - b2.z;
			var dist = sqrt(dx*dx+dy*dy+dz*dz);
			var mag = dt / (dist * dist * dist);
			var bm = b.mass * mag;
			var b2m = b2.mass * mag;
			b.vx -= dx * b2m;
			b.vy -= dy * b2m;
			b.vz -= dz * b2m;
			b2.vx += dx * bm;
			b2.vy += dy * bm;
			b2.vz += dz * bm;
			j += 1;
		}
	}
	i = 0;
	while( i < nbodies ) {
		var b = bodies[i];
		b.x += dt * b.vx;
		b.y += dt * b.vy;
		b.z += dt * b.vz;
		i += 1;
	}
}

energy = function(nbodies,bodies) {
	var e = 0, i = 0, j;
	while( i < nbodies ) {
		var b = bodies[i];
		e += 0.5 * b.mass * (b.vx * b.vx + b.vy * b.vy + b.vz * b.vz);
		i += 1;
		j = i;
		while( j < nbodies ) {
			var b2 = bodies[j];
			var dx = b.x - b2.x;
			var dy = b.y - b2.y;
			var dz = b.z - b2.z;
			var dist = sqrt(dx*dx+dy*dy+dz*dz);
			e -= (b.mass * b2.mass) / dist;
			j += 1;
		}
	}
	return e;
};

offset_momentum = function(nbodies,bodies) {
	var px = 0, py = 0, pz = 0;
	var i = 0;
	while( i < nbodies ) {
		var b = bodies[i];
		px += b.vx * b.mass;
		py += b.vy * b.mass;
		pz += b.vz * b.mass;
		i += 1;
	}
	var b = bodies[0];
	b.vx = 0 - px / solar_mass;
	b.vy = 0 - py / solar_mass;
	b.vz = 0 - pz / solar_mass;
}
;
var bodies = $array(
	// sun
	{
		x => 0,
		y => 0,
		z => 0,
		vx => 0,
		vy => 0,
		vz => 0,
		mass => solar_mass
	},
	// jupiter
	{
		x => $float("4.84143144246472090e+00"),
		y => $float("-1.16032004402742839e+00"),
		z => $float("-1.03622044471123109e-01"),
		vx => $float("1.66007664274403694e-03") * days_per_year,
		vy => $float("7.69901118419740425e-03") * days_per_year,
		vz => $float("-6.90460016972063023e-05") * days_per_year,
		mass => $float("9.54791938424326609e-04") * solar_mass
	},
	// saturn
	{
		x => $float("8.34336671824457987e+00"),
		y => $float("4.12479856412430479e+00"),
		z => $float("-4.03523417114321381e-01"),
		vx => $float("-2.76742510726862411e-03") * days_per_year,
		vy => $float("4.99852801234917238e-03") * days_per_year,
		vz => $float("2.30417297573763929e-05") * days_per_year,
		mass => $float("2.85885980666130812e-04") * solar_mass
	},
	// uranus
	{
		x => $float("1.28943695621391310e+01"),
		y => $float("-1.51111514016986312e+01"),
		z => $float("-2.23307578892655734e-01"),
		vx => $float("2.96460137564761618e-03") * days_per_year,
		vy => $float("2.37847173959480950e-03") * days_per_year,
		vz => $float("-2.96589568540237556e-05") * days_per_year,
		mass => $float("4.36624404335156298e-05") * solar_mass
	},
	// neptune
	{
		x => $float("1.53796971148509165e+01"),
		y => $float("-2.59193146099879641e+01"),
		z => $float("1.79258772950371181e-01"),
		vx => $float("2.68067772490389322e-03") * days_per_year,
		vy => $float("1.62824170038242295e-03") * days_per_year,
		vz => $float("-9.51592254519715870e-05") * days_per_year,
		mass => $float("5.15138902046611451e-05") * solar_mass
	}
);

var nbodies = $asize(bodies);

display = function() {
	var prec = $float("1e+09");
	var e = energy(nbodies,bodies) * prec;
	$print(round(e)/prec,"\n");
}

var n = $int($loader.args[0]);
if( n == null ) n = 1000;
offset_momentum(nbodies, bodies);
display();
var i = 0;
while( i < n ) {
	advance(nbodies,bodies,0.01);
	i += 1;
};
display();
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Nicolas Cannasse
*/
fmt = function(i) {
   var s = $string(i);
   while( $ssize(s) < 8 )
      s = " "+s;
   return s;
}
nsieve = function(m) {
   var a = $amake(m);
   var count = 0;
   var i = 2;
   while( i < m ) {
      if $not(a[i]) {
         count += 1;
         var j = (i << 1);
         while( j < m ) {
            if( $not(a[j]) ) a[j] = true;
            j += i;
         }
      }
      i += 1;
   }
   $print("Primes up to ",fmt(m)," ",fmt(count),"\n");
}

var n = $int($loader.args[0]);
if( n == null ) n = 2;
var i = 0;
while( i < 3 ) {
   nsieve(10000 << (n - i));
   i += 1;
}
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Nicolas Cannasse
*/

ack = function(x,y) {
   if( x == 0 ) return y + 1;
   if( y == 0 ) return ack(x - 1,1);
   return ack(x - 1,ack(x,y - 1));
}

fib = function(n) {
   if( n < 2 ) return 1;
   return fib(n-2) + fib(n-1);
}

fib_fp = function(n) {
   if( n < 2.0 ) return 1.0;
   return fib_fp(n - 2.0) + fib_fp(n - 1.0);
}

tak = function(x,y,z) {
   if( y >= x ) return z;
   return tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));
}

tak_fp = function(x,y,z) {
   if( y >= x ) return z;
   return tak_fp(tak_fp(x-1.0,y,z),tak_fp(y-1.0,z,x),tak_fp(z-1.0,x,y));
}

var n = $int($loader.args[0]);
if( n == null ) n = 4;
n -= 1;

$print("Ack(3,",n + 1,"): ",ack(3,n + 1),"\n");
$print("Fib(",n + 28.0,".0): ",fib_fp(n + 28.0),".0\n");
$print("Tak(",3*n,",",2*n,",",n,"): ",tak(3*n,2*n,n),"\n");
$print("Fib(",3,"): ",fib(3),"\n");
$print("Tak(3.0,2.0,1.0): ",tak_fp(3.0,2.0,1.0),".0\n");
