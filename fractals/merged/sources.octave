# nsieve benchmark for The Computer Language Shootout
# Written by Francesco Potorti, 1995

function A = nsieve (n)
# Erathostenes sieve algorithm: find all primes not greater than n
# Put in the public domain by Francesco Potorti` <pot at cnuce dot cnr dot it> 1995

  if (!is_scalar(n) || n < 1 || n != round(n))
    error ("n should be a positive integer\n");
  endif

  if (n <= 3)
    A = [2:n];
    return;
  endif

  # Make an array of ones, one for the number 2 and one for each odd number
  # greater than 2 and not greater than n.  The natural corresponding to the
  # i-th one (i>2) is then 2*n-1.  Put a zero where the corresponding
  # natural is not a prime.

  lp = floor ((n+1)/2);
  prime = ones (1, lp);
  for i = 2:(sqrt(n)+1)/2
    if prime(i)
      Ni = 2*i-1;
      range = (Ni*Ni+1)/2:Ni:lp;
      prime(range) = zeros (size (range));
    endif
  endfor
							        
  A = 2 * find (prime) - 1;
  A(1) = 2;
endfunction

function B = test(n)
  m = 2**n * 10000;
  PL = nsieve(m);
  count = length( nsieve(m) );
  printf("Primes up to %8d %8d\n", m, count)
endfunction

nn = str2num(argv{1});
if (nn >= 0)
  test(nn);
endif;
if (nn >= 1)
  test(nn - 1);
endif;
if (nn >= 2)
  test(nn - 2);
endif;
# $Id: partialsums.octave,v 1.1 2006-10-02 06:08:25 bfulgham Exp $

# This is a direct Octave translation of the C implimentation of partial-sums
# contributed by Mike Pall.

global n = str2num(argv{1});

global sum = 0;
for k = 0:n
    sum = sum + (2 / 3)**k;
endfor
printf("%.9f\t(2/3)^k\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1 / sqrt(k);
endfor
printf("%.9f\tk^-0.5\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1 / (k * (k + 1));
endfor
printf("%.9f\t1/k(k+1)\n", sum);

sum = 0;
for k = 1:n
    sink = sin(k);
    sum = sum + 1 / (k * k * k * sink * sink);
endfor
printf("%.9f\tFlint Hills\n", sum);

sum = 0;
for k = 1:n
    cosk = cos(k);
    sum = sum + 1 / ((k * k) * k * cosk * cosk);
endfor
printf("%.9f\tCookson Hills\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1 / k;
endfor
printf("%.9f\tHarmonic\n", sum);

sum = 0;
for k = 1:n
    sum = sum + 1.0 / (k * k);
endfor
printf("%.9f\tRiemann Zeta\n", sum);

sum = 0;
k = 1;
while (k <= (n-1) )
    sum = sum + 1 / k;
    k = k + 2;
endwhile
k=2;
while (k <= n)
    sum = sum - 1.0/k;
    k = k + 2;
endwhile
printf("%.9f\tAlternating Harmonic\n", sum);

sum = 0.0;
k=1;
while (k <= 2*(n-1))
    sum = sum + 1 / k;
    k = k + 4;
endwhile
k = 3;
while (k <= 2*n)
    sum = sum - 1 / k;
    k = k + 4;
endwhile
printf("%.9f\tGregory\n", sum);
# The Computer Language Shootout
# http://shootout.alioth.debian.org/
# contributed by Carson Reynolds 2007/4/10

y = 0;
x = fgets(stdin);

while ~feof(stdin)
  y = y + str2num(x);
  x = fgets(stdin);
end

printf("%d\n", y);
