;;; -*- mode: lisp -*-
;;; $Id: ackermann.pop11,v 1.1 2004-10-13 04:47:56 bfulgham Exp $
/*
 Trivial Ackermann implementation.  Does not attempt to force
 Poplog to use tail-recursive calls.
 */
vars n;

define constant procedure fast_ack (m, n);
   if m == 0 then
      n fi_+ 1
   elseif n == 0 then
      fast_ack(m fi_- 1, 1)
   else
      fast_ack(m fi_- 1, fast_ack(m, n fi_- 1))
   endif
enddefine;

define constant procedure get_args();
   if null(poparglist) then 1 else
      strnumber( hd(poparglist) )
   endif
enddefine;

get_args() -> n;

format_print('Ack(3,~D): ~D\n', [^n ^(fast_ack(3, n))]);
;;; -*- mode: lisp -*-
;;; $Id: ary.pop11,v 1.3 2005-05-13 16:24:17 igouy-guest Exp $
;;; http://shootout.alioth.debian.org/  
vars i,j,n;

define constant procedure get_args();
   if null(poparglist) then 1 else
      strnumber( hd(poparglist) )
   endif
enddefine;

get_args() -> n;

vars x = initintvec(n);
vars y = initintvec(n);

for i from 1 to n do
    i -> subscrintvec(i, x);
endfor;

repeat 1000 times 
    for j from 0 to (n - 1) do
        subscrintvec(n - j,y) + subscrintvec(n - j,x) -> subscrintvec(n - j, y)
    endfor;
endrepeat;

vars ans1 = subscrintvec(1,y);
vars ans2 = subscrintvec(n,y);
format_print('~D ~D\n', [^ans1 ^ans2]);
;;; -*- mode: lisp -*-
;;; $Id: fibo.pop11,v 1.3 2005-04-25 19:01:38 igouy-guest Exp $
/*
 Trivial Fibonacci implementation.  Does not attempt to force
 Poplog to use tail-recursive calls.
 */
vars n;

define constant procedure fib (m);
   if m < 2 then 1 else
      fib (m fi_- 1) + fib(m fi_- 2)
   endif
enddefine;

define constant procedure get_args();
   if null(poparglist) then 1 else
      strnumber( hd(poparglist) )
   endif
enddefine;

get_args() -> n;

format_print('~D\n', [^(fib(n))]);
;;; -*- mode: lisp -*-
;;; $Id: hello.pop11,v 1.1 2004-10-13 04:48:10 bfulgham Exp $

printf('hello world\n');
;;; $Id: sieve.pop11,v 1.2 2005-05-13 16:24:19 igouy-guest Exp $
;;; http://shootout.alioth.debian.org 
vars n;

define constant procedure get_args();
   if null(poparglist) then 1 else
      strnumber( hd(poparglist) )
   endif
enddefine;

get_args() -> n;

vars flags = initshortvec(8192 + 1);

vars count = 0;
vars i, j;
repeat n times
    0 -> count;
    for i from 2 to 8192 do
        1 -> subscrshortvec(i, flags)
    endfor;
    for i from 2 to 8192 do
        if subscrshortvec(i,flags) == 1 then
	    ;;; remove all multiples of prime: i
	    for j from (i + i) by i to 8192 do
	        0 -> subscrshortvec(j, flags);
	    endfor;
	    count + 1 -> count;
        endif;
    endfor;
endrepeat;

format_print('Count: ~D\n', [^count]);

;;; -*- mode: lisp -*-
;;; $Id: strcat.pop11,v 1.2 2005-05-13 16:24:19 igouy-guest Exp $
;;; http://shootout.alioth.debian.org/ 

constant aString = 'hello\n';

define constant procedure get_args();
   if null(poparglist) then 1 else
      strnumber( hd(poparglist) )
   endif
enddefine;

vars n = get_args();

define constant procedure string_concat (n);
  concat_strings( [% repeat n times aString endrepeat %] )
enddefine;

format_print('~A\n', [^(length( string_concat(n) ))]);
