//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
fun ack(x:int,y:int):int =>
  if x == 0 then y + 1
  elif y == 0 then ack(x-1, 1)
  else ack(x-1, ack(x, y-1))
  endif
;

v := ack(3,n);
print "Ack(3,"; print n; print "): "; print v; endl;


//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
//adapted from C solution
open Carray;

x := array_calloc[int] n;
y := array_calloc[int] n;

var i = 0;
whilst i < n do x.[i] = i + 1; ++i; done;

var k = 0;
whilst k<1000 do
  i = n - 1;
  whilst i >= 0 do
    y.[i] = y.[i] + x.[i];
    --i;
  done;
  ++k;
done;

print y.[0]; print " "; print y.[n-1]; endl;
free x;
free y;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
// Felix uses explicitly passed closures to handle errors
// and therefore guarrantees exceptions get caught statically

typedef err = int -> void;

var hi = 0;
var lo = 0;

proc blowup (n:int, hie:err, loe:err) {
  if n % 2 == 0 do loe n; else hie n; done;
}

proc lo_fun (n:int, hie:err) {
  blowup (n,hie,loe of (int));
  proc loe(n:int) { ++lo; goto fin; }
fin:>
}

proc hi_fun (n:int) {
  lo_fun (n,hie of (int));
  proc hie(n:int) { ++hi; goto fin; }
fin:>
}

proc some_fun (n:int) { hi_fun n; }

var i = n - 1;
until i < 0 do some_fun i; --i; done;
print "Exceptions: HI="; print hi; print " / LO="; print lo; endl;


//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);

fun fib(n:int):int =>
  if n < 2 then 1 else fib (n - 2) + fib (n - 1) endif
;

v := fib(n);
print v; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
open Stl;
open Stl::HashMap;

requires ext_string_hash;

body hexer """
string hex(int x) { char buf[20]; sprintf(buf,"%x",x); return buf; }
""";

fun hex: int -> string requires hexer;

var hm = HashMap::create[string,int]();

var i = n; until i == 0 do
  insert(hm,hex i,i);
  --i;
done;

var c = 0;
i = n; until i == 0 do
  if mem (hm,str i) do c++; done;
  --i;
done;

print c; endl;


//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
open Stl;
open Stl::HashMap;

requires ext_string_hash;

var h1 = HashMap::create[string,int]();

var i = 1; until i == 10000 do
  s := "foo_" + str i;
  insert (h1, s, i);
  ++i;
done;

var h2 = HashMap::create[string,int]();

i=n; until i == 0 do
  var j = begin h1; until j == end h1 do
    k, v := deref j;
    //h2.[k] = h2.[k] + v;
    h2.[k] += v;
    ++j;
  done;
  --i;
done;

print h1.["foo_1"]; print " "; print h1.["foo_9999"]; print " " ;
print h2.["foo_1"]; print " "; print h2.["foo_9999"]; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
// stolen from C implementation

fun gen_random: double -> double
  requires body """
    #define IM 139968
    #define IA   3877
    #define IC  29573
    static long last;
    double
    gen_random(double max) {
        static long last = 42;
        return( max * (last = (last * IA + IC) % IM) / IM );
    }
""";
typedef darray = C_hack::ptr[double];

fun subscript: darray * int -> lvalue[double] = "$1[$2]";

val cows_jump_over_moon = false;

proc heapsort(n:int, ra: darray) {
    var i:int;
    var j:int;
    var ir = n;
    var l = (n / 2) + 1;
    var rra:double;

    until cows_jump_over_moon do
        if l > 1 do
            --l;
            rra = ra.[l];
        else
            rra = ra.[ir];
            ra.[ir] = ra.[1];
            --ir;
            if ir == 1 do
                ra.[1] = rra;
                return;
            done;
        done;
        i = l;
        j = l * 2;
        whilst j <= ir do
            if j < ir and ra.[j] < ra.[j+1] do ++j; done;
            if rra < ra.[j] do
                ra.[i] = ra.[j];
                i = j;
                j *= 2;
            else
                j = ir + 1;
            done;
        done;
        ra.[i] = rra;
    done;
}

var ary = Carray::array_alloc[double] (n+1);
var i = n; until i == 0 do
    ary.[i] = gen_random(1.0);
    --i;
done;

heapsort(n, ary);

proc print_10f: double = 'printf("%.10f\\n", $1);';
print_10f ary.[n];

Carray::free ary;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
print "hello world"; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
// Adapted from C solution

header """
// a simple Double Linked List
// the head node is special, it's val is length of list
struct DLL {
    int val;
    struct DLL *next;        /* points to next or head (if at tail) */
    struct DLL *prev;        /* points to prev or tail (if at head) */
};
""";

body """
inline int len(DLL *head) { return(head->val); }
inline int empty(DLL *head) { return(len(head) == 0); }
inline DLL *first(DLL *head) { return(head->next); }
inline DLL *last(DLL *head) { return(head->prev); }

void push_tail(DLL *head, DLL *item) {
    DLL *tail = head->prev;
    tail->next = item;
    item->next = head;
    head->prev = item;
    item->prev = tail;
    head->val++;
}

DLL *pop_tail(DLL *head) {
    DLL *prev, *tail;
    if (empty(head)) return(NULL);
    tail = head->prev;
    prev = tail->prev;
    prev->next = head;
    head->prev = prev;
    head->val--;
    return(tail);
}

void push_head(DLL *head, DLL *item) {
    DLL *next = head->next;
    head->next = item;
    next->prev = item;
    item->next = next;
    item->prev = head;
    head->val++;
}

DLL *pop_head(DLL *head) {
    DLL *next;
    if (empty(head)) return(NULL);
    next = head->next;
    head->next = next->next;
    next->next->prev = head;
    head->val--;
    return(next);
}

int list_equal(DLL *x, DLL *y) {
    DLL *xp, *yp;
    // first val's checked will be list lengths
    for (xp=x, yp=y; xp->next != x; xp=xp->next, yp=yp->next) {
        if (xp->val != yp->val) return(0);
    }
    if (xp->val != yp->val) return(0);
    return(yp->next == y);
}

DLL *list_new() {
    DLL *l = (DLL *)malloc(sizeof(DLL));
    l->next = l;
    l->prev = l;
    l->val = 0;
    return(l);
}

/* inclusive sequence 'from' <-> 'to' */
DLL *list_sequence(int from, int to) {
    int size, tmp, i, j;
    DLL *l;
    if (from > to) {
        tmp = from; from = to; to = tmp;
    }
    size = to - from + 1;
    l = (DLL *)malloc((size+1) * sizeof(DLL));
    from--;
    for (i=0, j=1; i<size; ++i, ++j) {
        l[i].next = &l[i+1];
        l[j].prev = &l[j-1];
        l[i].val = from++;
    }
    l[0].prev = &l[size];
    l[size].next = &l[0];
    l[size].prev = &l[size-1];
    l[size].val = from;
    l[0].val = size;
    return(l);
}

DLL *copy(DLL *x) {
    int i, j, size = len(x);
    DLL *xp, *l = (DLL *)malloc((size+1) * sizeof(DLL));
    for (i=0, j=1, xp=x; i<size; i++, j++, xp=xp->next) {
        l[i].next = &l[j];
        l[j].prev = &l[i];
        l[i].val = xp->val;
    }
    l[0].prev = &l[size];
    l[size].next = &l[0];
    l[size].val = last(x)->val;
    return(l);
}

void rev (DLL *head) {
    DLL *tmp, *p = head;
    do {
        tmp = p->next;
        p->next = p->prev;
        p->prev = tmp;
        p = tmp;
    } while (p != head);
}
""";

type DLL_head = "DLL*";
type DLL_item = "DLL*";

fun get: DLL_item -> int = "$1->val";

fun len: DLL_head -> int;
fun empty: DLL_head -> bool;

fun non_empty(x:DLL_head)=> not (empty x);

fun first: DLL_head -> DLL_item;
fun last: DLL_head -> DLL_item;

proc push_tail: DLL_head * DLL_item;
fun pop_tail: DLL_head -> DLL_item;
proc push_head: DLL_head * DLL_item;

fun pop_head: DLL_head -> DLL_item;
fun eq: DLL_head * DLL_head -> bool = "list_equal($1,$2)";
fun ne (x:DLL_head,y:DLL_head) => not (x == y);

fun list_new: unit -> DLL_head;

/* inclusive sequence 'from' <-> 'to' */
fun list_sequence: int * int -> DLL_head;
fun copy: DLL_head -> DLL_head;

proc rev: DLL_head;
proc free: DLL_head = "std::free($1);";

proc check(cond:bool) (msg:string) {
  open System;
  open Text_file;
  if cond goto endoff;
  writeln (stderr,msg);
  exit 1;
endoff:>
}

SIZE:=10000;


var result: int;
proc test_lists() {
    var li1 = list_sequence(1, SIZE);
    var li2 = copy(li1);
    var x : DLL_item;
    check (li2 == li1) "li2 and li1 are not equal";

    // remove each individual item from left side of li2 and
    // append to right side of li3 (preserving order)
    var li3 = list_new();
    whilst non_empty li2 do
        x = pop_head li2;
        push_tail(li3, x);
    done;

    check (empty li2) "li2 should be empty now";

    // remove each individual item from right side of li3 and
    // append to right side of li2 (reversing list)
    whilst non_empty li3 do
        x = pop_tail li3;
        push_tail(li2, x);
    done;

    check (empty li3) "li3 should be empty now";

    // reverse li1 in place
    rev li1;

    check (get (first li1) == SIZE) "li1 first value wrong";
    check (get (last li1) == 1) "last value wrong";

    check (get (first li2) == SIZE) "li2 first value wrong";
    check (get (last li2) == 1) "li2 last value wrong";
    check (len li1 == SIZE) "li1 size wrong";

    // compare li1 and li2 for equality
    check (li1 == li2) "li1 and li2 are not equal";

    result = len li1;
    free li1;
    free li2;
    free li3;
}

var i = n;
until i == 0 do test_lists; --i; done;
print result; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
//Adapted from C++ solution.

body """
int **mkmatrix(int rows, int cols) {
  int i, j, count = 1;
  int **m = (int **) malloc(rows * sizeof(int *));
  for (i=0; i<rows; i++) {
    m[i] = (int *) malloc(cols * sizeof(int));
    for (j=0; j<cols; j++) m[i][j] = count++;
  }
  return(m);
}

void zeromatrix(int rows, int cols, int **m) {
  int i, j;
  for (i=0; i<rows; i++)
  for (j=0; j<cols; j++)
    m[i][j] = 0;
}

void freematrix(int rows, int **m) {
  while (--rows > -1) free(m[rows]);
  free(m);
}

void mmult(int rows, int cols, int **m1, int **m2, int **m3) {
  int i, j, k, val;
  for (i=0; i<rows; i++)
  for (j=0; j<cols; j++) {
    val = 0;
    for (k=0; k<cols; k++) val += m1[i][k] * m2[k][j];
    m3[i][j] = val;
  }
}

int get(int **mm, int x, int y) { return mm[x][y];}
""";

type matrix = "int**";
fun mkmatrix: int * int -> matrix;
fun get: matrix * int * int -> int;
proc zeromatrix: matrix;
proc mmult: int * int * matrix * matrix * matrix;
proc freematrix: int * matrix;

SIZE := 30;
m1 := mkmatrix(SIZE,SIZE);
m2 := mkmatrix(SIZE,SIZE);
mm := mkmatrix(SIZE,SIZE);

var i = n;
until i == 0 do
  mmult(SIZE, SIZE, m1, m2, mm);
  --i;
done;

print (get(mm,0,0)); print " ";
print (get(mm,2,3)); print " ";
print (get(mm,3,2)); print " ";
print (get(mm,4,4)); endl;

freematrix(SIZE, m1);
freematrix(SIZE, m2);
freematrix(SIZE, mm);

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
// Adapted from C++ solution

body """
class Toggle {
public:
    Toggle(bool start_state) : state(start_state) { }
    virtual ~Toggle() {  }
    bool value() { return(state); }
    virtual Toggle* activate() {
        state = !state;
        return this;
    }
protected:
    bool state;
};

class NthToggle : public Toggle {
public:
    NthToggle(bool start_state, int max_counter) :
        Toggle(start_state), count_max(max_counter), counter(0) {
    }
    Toggle *activate() {
        if (++this->counter >= this->count_max) {
            state = !state;
            counter = 0;
        }
        return this;
    }
private:
    int count_max;
    int counter;
};
""";

pod type toggle =  "class Toggle*";
fun new_toggle: bool -> toggle = "new Toggle($1)";
fun new_ntoggle: bool * int -> toggle = "new NthToggle($1,$2)";
proc del: toggle = "delete $1;";
fun value: toggle -> bool = "$1->value()";
proc activate: toggle = "$1->activate();";

proc check (t:toggle) {
  var tt = t;
  var v = true;
  var i = n;
  until i == 0 do
    activate tt;
    v = value tt;
    --i;
  done;
  print v; endl;
  del t;
}

check (new_toggle true);
check (new_ntoggle (true, 3));


//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
// adapted from C solution

/* kmedian permutes elements of a to get
   a[i]<=a[k] for i<k
   a[i]>=a[k] for i>k
        See. N. Wirth, Algorithms+data structures = Programs
*/

open Stl;
open Stl::Vector;

proc printf: double = 'printf("%f",$1);';

proc kmedian(v: stl_vector[double], mid:int)
{
  var a = begin v;
  var k = mid;
  var n = len v;
  whilst true do
    var j = Cstdlib::rand() % n;
    b := a.[j];
    var i = 0;
    j = n-1;
    var flag = true;
    whilst flag do
      whilst  a.[i] < b do i++; done;
      whilst  a.[j] > b do j--; done;
      if i<j do
        a.[i] <-> a.[j];
        i++;
        j--;
      else
        if a.[j] < b do j++; done;
        if a.[i] > b do i--; done;
        flag = false;
      done;
    done;

    if i<k do
      k -= i+1;
      n -= i+1;
      a += i+1;
    elif j>k do
      n=j;
    else return;
    done;
  done;
}

fun max(a:stl_vector[double], n:int):double =
{
  var temp=a.[0];
  var j = n-1;
  until j == 0 do
    if a.[j]>temp do temp=a.[j]; done;
    --j;
  done;
  return temp;
}


var sum = 0.0;
var average_deviation = 0.0;
var standard_deviation = 0.0;
var variance = 0.0;
var skew = 0.0;
var kurtosis = 0.0;
var median = 0.0;
var deviation = 0.0;

var nums:stl_vector[double];

var line = Text_file::readln Text_file::stdin;
until line == "" do
  v := String::atof line;
  sum += v;
  push_back (nums,v);
  line = Text_file::readln Text_file::stdin;
done;

m := len nums;
mean := sum/double_of m;
var i = 0; until i == m do
  dev := nums.[i] - mean;
  dev2 := dev*dev;
  dev3 := dev2*dev;
  dev4 := dev3*dev;
  average_deviation += fabs dev;
  variance += dev2 /*pow(deviation,2)*/;
  skew += dev3 /* pow(deviation,3) */;
  kurtosis += dev4 /* pow(deviation,4) */;
  ++i;
done;

average_deviation /= double_of m;
variance /= double_of (m - 1);
standard_deviation = sqrt variance;
if variance != 0.0 do
  skew /= double_of m * variance * standard_deviation;
  kurtosis = kurtosis/(double_of m * variance * variance) - 3.0;
done;

mid := m / 2;
kmedian(nums, mid);
median =
  if m % 2 == 1 then nums.[mid]          // odd
  else (nums.[mid] + max (nums,mid))/2.0 // even
  endif
;

print "n:                  "; print m; endl;
print "median:             "; printf median; endl;
print "mean:               "; printf mean; endl;
print "average_deviation:  "; printf average_deviation; endl;
print "standard_deviation: "; printf standard_deviation; endl;
print "variance:           "; printf variance; endl;
print "skew:               "; printf skew; endl;
print "kurtosis:           "; printf kurtosis; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
var x = 0;

var a=0;
whilst a<n do
  var b=0;
  whilst b<n do
    var c=0;
    whilst c<n do
      var d=0;
      whilst d<n do
        var e=0;
        whilst e<n do
          var f=0;
          whilst f<n do
            x++;
            ++f;
          done;
          ++e;
        done;
        ++d;
      done;
      ++c;
    done;
    ++b;
  done;
  ++a;
done;

print x; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
// Adapted from C++ solution

body """
class Toggle {
public:
    Toggle(bool start_state) : state(start_state) { }
    virtual ~Toggle() {  }
    bool value() { return(state); }
    virtual Toggle* activate() {
        state = !state;
        return this;
    }
protected:
    bool state;
};

class NthToggle : public Toggle {
public:
    NthToggle(bool start_state, int max_counter) :
        Toggle(start_state), count_max(max_counter), counter(0) {
    }
    Toggle *activate() {
        if (++this->counter >= this->count_max) {
            state = !state;
            counter = 0;
        }
        return this;
    }
private:
    int count_max;
    int counter;
};
""";

pod type toggle =  "class Toggle*";

fun new_toggle: bool -> toggle = "new Toggle($1)";
fun new_ntoggle: bool * int -> toggle = "new NthToggle($1,$2)";
proc del: toggle = "delete $1;";
fun value: toggle -> bool = "$1->value()";
proc activate: toggle = "$1->activate();";
proc print (t: toggle) { print (value t); }

proc check(t: toggle, k:int) {
  var tt = t;
  var i=k;
  until i == 0 do
    activate tt;
    print tt; endl;
    --i;
  done;
  del t;
}

check(new_toggle true,5);

{
  var i = n;
  until i == 0 do
    del (new_toggle true);
    --i;
  done;
  endl;
};

check (new_ntoggle(true, 3), 8);

{
  var i = n;
  until i == 0 do
    del (new_ntoggle (true, 3));
    --i;
  done;
};

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
var produced = 0;
var consumed = 0;

proc consumer() {
  until consumed == n do
    var x:int; read x;
    ++consumed;
  done;
}

proc producer() {
  var i = 1;
  until produced == n do
    ++produced;
    send[int] (&con) i;
    ++i;
  done;
}

var con = start the consumer ();
var prod= start the producer ();
run prod;

print produced; print " "; print consumed; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
//adapted from Ocaml solution
im := 139968;
ia := 3877;
ic := 29573;
first_last := 42;

proc printf: double = 'printf("%.9f",$1);';


fun gen_random (max:double, last:int, i:int):double =>
  let ?new_last = (last * ia + ic) % im in
  if i > 1 then gen_random (max, new_last, (i - 1))
  else max * double_of new_last / double_of im
  endif
;

printf (gen_random (100.0, first_last, n)); endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);

open Lexer;

regexp digit = ["0123456789"];
regexp digits3 = digit digit digit;
regexp digits4 =  digits3 digit;

regexp area_code = digits3 | "(" digits3 ")";
regexp exchange = digits3;

regexp phone = area_code " " exchange (" " | "-") digits4;

// Felix, like Python, provides no literals of char type
zero := ord("0".[0]);
nine := ord("9".[0]);

// Felix regular matching currently only supports
// actual regular sets of strings -- it does not support
// lookback or lookahead because they're not regular
//
// So we have to hand code the context check.
//
fun check_context(start: iterator, finish: iterator): string =
{
  prior :=  ord(deref(start-1));
  next := ord(deref(finish));
  return
    if zero <= prior &<= nine
    or zero <= next &<= nine
    then ""
    else string_between(start, finish)
    endif
  ;
}

// this is the actual lexer function
fun lexit (start:iterator, finish:iterator): iterator * string =>
  reglex start to finish with
  | phone => check_context (lexeme_start, lexeme_end)
  | _ => ""
  endmatch
;

// hack so context_check won't crash (pre- and append space)
val data = " " + Text_file::load(Text_file::stdin)+" ";
first := Lexer::start_iterator data;
finish := Lexer::end_iterator data;


var i=n;
var current: iterator;
var s: string;
whilst i>1 do
  current = first;
  until current == finish do
    current, s = lexit(current, finish);
  done;
  --i;
done;

proc print_phone(x:string, j:int) {
  n := len x;
  var s = "";
  var i = 0;
  whilst i<n do
    if zero <= ord(x.[i]) &<= nine do
      s = s + ord(x.[i]);
    done;
    ++i;
  done;
  print j; print ": ";
  print ("("+s.[0 to 3]+") "+s.[3 to 6]+"-"+s.[6 to 10]); endl;
}

current = first;
var j = 0;
until current == finish do
 current, s = lexit(current, finish);
 if s != "" do  ++j; print_phone (s,j); done;
done;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);

open List;
open Text_file;

var x = Empty[string];
var s = readln stdin;
until s == "" do
  x = Cons (s,x);
  s = readln stdin;
done;

proc plist(x:list[string]){
  match x with
  | Cons (?s,?t) => { print s; plist t; }
  |  _ => {}
  endmatch;
};

plist x;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
type barry = "char*";
fun mk_barry : unit -> barry = "(char*)calloc(8193,1)";
proc free : barry = "free($1);";
fun subscript: barry * int -> lvalue[bool] = "$1[$2]";

var prime = mk_barry();
var i:int;
var k: int;
var count = 0;
var m = n;

until m == 0 do
  m--;
  count = 0;
  for {i=2;} { i <= 8192 } { i++; } { prime.[i] = true; };
  i=2;
  whilst i <= 8192 do
    if prime.[i] do
      k=i+i;
      whilst k <= 8192 do
        prime.[k] = false;
        k+=i;
      done;
      count++;
    done;
    i++;
  done;
done;

free prime;

print "Count: "; print count; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
open Stl;
open Stl::HashSet;
open Text_file;

requires ext_string_hash;

var prefix = Env::getenv "DICT_DIR";
if prefix == "" do prefix = "./"; done;


var dict = HashSet::create[string]();
var f = fopen_input (prefix + "Usr.Dict.Words");
var word = readln f;
until word == "" do insert (dict,word); word = readln f; done;
fclose f;

word = readln stdin;
until word == "" do
  if not (mem (dict,word)) do print word; done;
  word = readln stdin;
done;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
// Adapted from C++ solution

var str = "";
var capacity = 31;
reserve(str,capacity); // as per C-string
var newLength = 6;
var i = n;
until i == 0 do
  if newLength > capacity do
    capacity *= 2;
    reserve(str,capacity);
  done;
  str += c"hello\n";
  newLength += 6;
  --i;
done;

print (len str); endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);

open Text_file;
var sum = 0;
var line = readln stdin;

until line == "" do
  sum += atoi(line);
  line = readln stdin;
done;

print sum; endl;


//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
proc print1: double = 'printf("%.1f\\n",$1);';

fun Tak (x:double, y:double, z:double): double =>
  if (y >= x) then z
  else Tak(Tak(x-1.0,y,z), Tak(y-1.0,z,x), Tak(z-1.0,x,y))
  endif
;

w := double_of n;
print1 (Tak(w*3.0, w*2.0, w*1.0));

include "std";

// vim: ts=4 ft=felix
//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
open Ulong;

body '''
#include <limits.h>
#include <unistd.h>
#define BSIZE 4096
unsigned long wds[UCHAR_MAX + 1];
unsigned long nwds[UCHAR_MAX + 1];
char sp=' ';
char tab = '\\t';
char lf='\\n';
unsigned char buff[BSIZE];
''';

const UCHAR_MAX:int;
const BSIZE:int;
const sp:int;
const lf:int;
const tab:int;

proc setws: int * ulong = "wds[$1]=$2;";
proc setnws: int * ulong = "nwds[$1]=$2;";
fun getws: ulong -> ulong = "wds[$1]";
fun getnws: ulong -> ulong = "nwds[$1]";

fun readbuf: unit -> int = "read(0,buff,BSIZE)";

var prev_nws = 0x1_0000uL;
var w_cnt = 0uL;
var l_cnt = 0uL;
var b_cnt = 0uL;

type iterator = "unsigned char *";
fun eq: iterator * iterator -> bool = "$1 == $2";
fun deref: iterator -> ulong = "*$1";
fun add: iterator * ulong -> iterator = "$1 + $2";
proc post_incr: iterator = "$1++;";

fun band: ulong * ulong -> ulong = "$1 & $2";
fun hi: ulong -> ulong = "$1 >> 16";
fun lo: ulong -> ulong = "$1 & 0xFFFFuL";
fun parity : ulong -> ulong = "$1 & 1uL";
fun neg: ulong -> ulong = "-$1";

const buff: iterator = "buff";

fun iswhite(ch:int) =>
  ch == sp or ch == tab or ch == lf;

fun islf(ch:int)=> ch == lf;

fun ul(x:bool)=> C_hack::cast[ulong]x;

/* Fill tables */
{
  var ch = UCHAR_MAX; until ch < 0 do
    setws(ch, ul (iswhite ch) + band (0x10000uL,  -(ul (islf ch))));
    setnws(ch, ul (not (iswhite ch)) +  0x10000uL);
    --ch;
  done;
};

/* Main loop */
{
  var cnt: ulong;
  proc uread() {
    var n = readbuf();
    if n < 0 do System::exit 1; done;
    cnt = C_hack::cast[ulong]n;
  }

  uread;
  whilst cnt > 0uL do
    var vect_count = 0uL;
    var pp:iterator;
    pe := buff + cnt;

    b_cnt += cnt;
    pp = buff;

    until pp == pe do
      vect_count += band (getws(deref pp), prev_nws);
      prev_nws    = getnws(deref pp);
      pp++;
    done;
    w_cnt += lo vect_count;
    l_cnt += hi vect_count;
    uread;
  done;

  w_cnt += parity prev_nws;
};

print l_cnt; print " "; print w_cnt; print " "; print b_cnt; endl;

//
// Contributed by John Skaller
//
include "std";
n := atoi(System::argv 1);
include "stl";
open Stl;
open Stl::HashMap;
open Stl::Set;
open Text_file;
open Lexer;

body lt_cmp[t] """
  namespace std {
    template<>
    bool less<?1> :: operator()(?1 const &a, ?1 const &b)const {
     return a.mem_0 == b.mem_0 ?? a.mem_1 < b.mem_1 : a.mem_0 > b.mem_0;
    }
  }
""";

proc tolower : lvalue[string] = "tol($1);" requires
  body """
    void tol(std::string &x) {
      std::string::iterator e = x.end();
      for(std::string::iterator i = x.begin(); i != e; ++i)
        *i = tolower (*i);
    }
  """,
  cctype_hxx
;

requires ext_string_hash;
requires lt_cmp[int * string];

regexp upper = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"];
regexp lower = ["abcdefghijklmnopqrstuvwxyz"];
regexp wrd = ( upper | lower) +;

fun lexit (start:iterator, finish:iterator): iterator * bool =>
  reglex start to finish with
  | wrd => true
  | _ => false
  endmatch
;

var dict = HashMap::create[string,int]();
proc add_word(s:iterator, e:iterator)
{
  var word = string_between(s,e);
  tolower word;
  p := find (dict,word);
  if p == end dict do
    insert (dict,word,1);
  else
    k,j := deref p;
    (deref p).(1) ++;
  done;
};

{
  var data = readln stdin;
  until data == "" do
    first := start_iterator data;
    last := end_iterator data;

    var current = first;
    var next = first;
    var isword : bool;
    until current == last do
      next, isword = lexit(current, last);
      if isword do
        add_word(current,next);
        current = next;
      else
        ++current;
      done;
    done;
    data = readln stdin;
  done;
};

var wmap = Set::create[int * string] ();
{
  var cur = begin dict;
  dlast := end dict;
  until cur == dlast do
    word, count := deref cur;
    insert (wmap,(count,word));
    ++cur;
  done;
};

{
  var cur = begin wmap;
  last := end wmap;
  until cur == last do
    count, word := deref cur;
    print ("       " + str count).[-7 to]; print " "; print word; endl;
    ++cur;
  done;
};

