/*     
The Computer Language Shootout   
http://shootout.alioth.debian.org/  
Contributed by Jesse Millikan    
*/

importPackage(java.lang);
importPackage(java.util.concurrent.locks);

// map makes the voices go away 
// return new array of f (method name or function) applied to each element
// return the item if the value evaluates false
Array.prototype.map = function(f){
 var i = 0, m = [];

 for(; i < this.length; i++) 
  m.push(
   (typeof f == 'function' ? f(this[i]) : this[i][f]()) || this[i])

 return m;
}

var red = 0, blue = 1, yellow = 2, faded = 3;
function complement(a,b){ return 3 - a - b }

var meetings = parseInt(arguments[0]), 
    meet_lock = new ReentrantLock(),
    second_in = meet_lock.newCondition(),
    first_color = faded, second_color;

function meet(color){
 var other_color = faded;

 meet_lock.lock();

 if(meetings > 0){
  if(first_color == faded){
   first_color = color;
   second_in.await();
   other_color = second_color;
  }
  else{
   second_color = color;
   other_color = first_color;
   second_in.signal();
   meetings--;
   first_color = faded;
  }
 }

 meet_lock.unlock();

 return other_color;
}

var total = 0, t_lock = new ReentrantLock();

// Create a basic 'live' thread for each color 
[blue, red, yellow, blue].map(function(color){
 return new Thread(function(){
  var c, met = 0;

  while(color != faded){
   c = meet(color); 
   if(c == faded) color = faded;
   else{ 
    if(c != color) color = complement(c, color);
    met++;
   }
  } 

  t_lock.lock(); total += met; t_lock.unlock()
 })
}).map('start').map('join');
// Start all of the threads, and then join all of them

print(total);
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   for JavaScript Rhino only
*/

importPackage(java.io);
importPackage(java.lang);

function generateFrequencies(seq, len) {
   var ns = seq.length + 1 - len;
   frequencies = new Object(); // All objects are also hashtables
   for (var i = 0; i < ns; i++) {
      var nucleo = seq.slice(i, i + len);
      if (nucleo in frequencies)
         frequencies[nucleo] += 1;
      else
         frequencies[nucleo] = 1;
   }
   return frequencies;
}

function writeFrequencies(seq, len) {
   var frequencies = generateFrequencies(seq, len);
   var freqArray = new Array();
   var total = 0;
   for (var nucleo in frequencies) {
      total += frequencies[nucleo];
      freqArray.push( { 'num': frequencies[nucleo], 'nuc': nucleo } );
   }
   freqArray.sort(function(a,b) { return b['num'] - a['num'];});
   for (var i in freqArray) {
      var percent = freqArray[i]['num'] * 100 / total;
      print(freqArray[i]['nuc'] + " " + percent.toFixed(3));
   }
   print();
}

function writeCount(seq, s) {
   var frequencies = generateFrequencies(seq, s.length);
   print((s in frequencies ? frequencies[s] : 0) + "\t" + s);
}

// Read in standard input.  Borrowed from the Java implementation, kind of.
var sbuffer = new StringBuffer();
var line;
var stdin = new BufferedReader(
   new InputStreamReader(Packages.java.lang.System['in']));
while ((line = stdin.readLine()) != null) {
   if (line.startsWith(">THREE")) break;
}
var c;
while ((line = stdin.readLine()) != null) {
   c = line.charAt(0);
   if (c == '>')
      break;
   else if (c != ';')
      sbuffer.append(line.toUpperCase());
}
var seq = '' + sbuffer.toString();
sbuffer = null;

writeFrequencies(seq, 1);
writeFrequencies(seq, 2);
nucleos = 'GGT GGTA GGTATT GGTATTTTAATT GGTATTTTAATTTATAGT'.split(' ');
for (i in nucleos) {
   writeCount(seq, nucleos[i]);
}

// The Great Computer Language Shootout
// http://shootout.alioth.debian.org/
//
// Contributed by Jesse Millikan

importPackage(java.lang)
importPackage(java.util.concurrent)

// Two boxes are linked together with a thread
// Get from b1, increment, put it in b2, N times
// Must be done in a separate function to scope b1 and b2 properly
function link(b1, b2){
 new Thread(function(){
  for(var i=0; i<N; i++) 
   b2.put(parseInt(b1.take()) + 1)
 }).start()
}

N = parseInt(arguments[0])

// Use a sized queue to block on 1 value
next = last = new ArrayBlockingQueue(1)

// Link 500 boxes together, back-to-front, each b to next
for(i = 0; i < 500; i++){
 b = new ArrayBlockingQueue(1) 
 link(b, next)
 next = b
}

// Link -1 with (put 0s into) the first box
link({take: function(){return -1}}, next)

total = 0 // Get N values from the last box
for(i = 0; i < N; i++) total += parseInt(last.take())
print(total)
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   for JavaScript Rhino only
*/

importPackage(java.io);
importPackage(java.lang);

var r = new BufferedReader(
   new InputStreamReader(Packages.java.lang.System['in']));
var sb = new StringBuffer(10240);
var cbuf = java.lang.reflect.Array.newInstance(
   java.lang.Character.TYPE, 10240);
var charsRead;

while ((charsRead = r.read(cbuf, 0, 10240)) != -1)
   sb.append(cbuf, 0, charsRead);
var seq = '' + sb.toString(); 
 // seq is now a JavaScript string, not a Java string.  Keeping it Java
 // might be faster, but wouldn't test JavaScript's speed.
sb = null;
    
var initialLength = seq.length;
seq = seq.replace( />.*\n|\n/g, '');
var codeLength = seq.length;

var variants = [ 'agggtaaa|tttaccct','[cgt]gggtaaa|tttaccc[acg]', 
   'a[act]ggtaaa|tttacc[agt]t', 'ag[act]gtaaa|tttac[agt]ct', 
   'agg[act]taaa|ttta[agt]cct', 'aggg[acg]aaa|ttt[cgt]ccct',
   'agggt[cgt]aa|tt[acg]accct', 'agggta[cgt]a|t[acg]taccct', 
   'agggtaa[cgt]|[acg]ttaccct' ];
for (var i in variants) {
   var matches = seq.match(new RegExp(variants[i],'g'));
   var nummatches = (matches != null) ? matches.length : 0;
   print(variants[i] + ' ' + nummatches);
}

var iubs={'B':'(c|g|t)', 'D':'(a|g|t)', 'H':'(a|c|t)', 'K':'(g|t)', 
   'M':'(a|c)', 'N':'(a|c|g|t)', 'R':'(a|g)', 'S':'(c|g)', 
   'V':'(a|c|g)', 'W':'(a|t)', 'Y':'(c|t)'};
for (var x in iubs) {
   seq = seq.replace(new RegExp(x, 'g'), iubs[x]); 
   // Passing Regexp object is required by benchmark. 
   // Otherwise String.replace matches as a string
}
print();
print(initialLength);
print(codeLength);
print(seq.length);
/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   for JavaScript Rhino only
*/

importPackage(java.io);

comp = { 'A':'T', 'B':'V', 'C':'G', 'D':'H', 'E':'E', 'F':'F', 'G':'C', 
   'H':'D', 'I':'I', 'J':'J', 'K':'M', 'L':'L', 'M':'K', 'N':'N', 'O':'O',
   'P':'P', 'Q':'Q', 'R':'Y', 'S':'S', 'T':'A', 'U':'U', 'V':'B', 'W':'W',
   'X':'X', 'Y':'R', 'Z':'Z'};

function print60reverse(buffer) {
   var line = "";
   var bl = buffer.length;
   for (var i = bl-1; i >= 0; i--) {
      line += comp[buffer.charAt(i)];
      if ((bl - i) % 60 == 0) {
         print(line);
         line = "";
      }
   }
   if (line.length > 0) print(line);
}

var line;
var stdin = new BufferedReader(
   new InputStreamReader(Packages.java.lang.System['in']));
var buffer = "";
while ((line = stdin.readLine()) != null) {
   if (line.charCodeAt(0) == 62) {
      if (buffer != "") {
         print60reverse(buffer.toUpperCase());
         buffer = "";
      }
      print(line);
   } else buffer += line;
}
print60reverse(buffer.toUpperCase());

/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
   for JavaScript Rhino only
*/

importPackage(java.io);

var line;
var stdin = new BufferedReader(
   new InputStreamReader(Packages.java.lang.System['in']));
   
var total = 0;
while ((line = stdin.readLine()) != null) {
   total += parseInt(line);
}
print(total);
