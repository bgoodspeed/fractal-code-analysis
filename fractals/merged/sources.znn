(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module fannkuch;
import System.Console as C, BenchmarksGame;

procedure pfannkuchen(n: integer): integer; 
type
   Vector = array * of integer;
var
   perm, perm1, count, maxPerm: Vector;
   check, m, r, i, k, temp, maxFlipsCount, flipsCount, perm0: integer;
begin
   perm := new Vector(n); 
   perm1 := new Vector(n); 
   count := new Vector(n); 
   maxPerm := new Vector(n); 

   check := 0;
   maxFlipsCount := 0;
   m := n - 1;
   for i := 0 to m do perm1[i] := i; end;

   r := n;
   loop
      (* write-out the first 30 permutations *)
      if (check < 30) then
         for i := 0 to m do C.Write("{0}", perm1[i]+1); end;
         C.WriteLine();
         inc(check);
      end;

      while r # 1 do count[r-1] := r; dec(r); end;
      if ~ ((perm1[0]=0) or (perm1[m]=m)) then
         for i := 0 to m do perm[i] := perm1[i]; end;
         flipsCount := 0;
         loop
            k := perm[0];
            if k = 0 then exit; end;
            for i := 0 to ((k+1) div 2) - 1 do
               temp := perm[i]; perm[i] := perm[k-i]; perm[k-i] := temp;
            end;
            inc(flipsCount);
         end;
         if flipsCount > maxFlipsCount then
            maxFlipsCount := flipsCount;
            for i := 0 to m do maxPerm[i] := perm1[i]; end;
         end;
      end;
      loop
         if r = n then return maxFlipsCount; end;
         perm0 := perm1[0];
         i := 0;
         while i < r do
            k := i + 1;
            perm1[i] := perm1[k];
            i := k;
         end;
         perm1[r] := perm0;

         dec(count[r]);
         if count[r] > 0 then exit; end;
         inc(r);
      end;
   end;
end pfannkuchen;

var 
   n : integer;
begin 
   n := BenchmarksGame.argi();
   C.WriteLine("Pfannkuchen({0}) = {1}", n, pfannkuchen(n));
end fannkuch.
(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
*)

module hello; begin writeln("hello world"); end hello.
module BenchmarksGame;
import System;

procedure {public} argi(): integer;
var 
   objArray : System.Array;
   obj : System.Object;
   n : integer;
begin
   objArray := System.Environment.GetCommandLineArgs();
   obj := objArray.GetValue(1);
   return integer(System.Int32.Parse(obj.ToString()));
end argi;


procedure {public} writex(x:real); 
begin
   System.Console.Write("{0:f9}",x); 
end writex;

end BenchmarksGame.
(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module nbody;
import 
   JovianBodies as B,
   System.Math as M,
   System.Console as C, 
   BenchmarksGame;

type {ref} NBodySystem = object
   var b: array 5 of B.Body;

   procedure {public} OffsetMomentum();
   var
      px, py, pz: real;
      i: integer;
   begin
      for i := 0 to len(b)-1 do
         px := px + (b[i].vx * b[i].mass);
         py := py + (b[i].vy * b[i].mass);
         pz := pz + (b[i].vz * b[i].mass);
      end;
      b[0].OffsetMomentum(px,py,pz);
   end OffsetMomentum;

   procedure {public} Advance(dt: real);
   var
      dx, dy, dz, distance, mag: real;
      i, j, n: integer;
   begin
      n := len(b) - 1;
      for i := 0 to n do
         for j := i+1 to n do
            dx := b[i].x - b[j].x;
            dy := b[i].y - b[j].y;
            dz := b[i].z - b[j].z;

            distance := M.Sqrt(dx*dx + dy*dy + dz*dz);
            mag := dt / (distance * distance * distance);

            b[i].vx := b[i].vx - (dx * b[j].mass * mag);
            b[i].vy := b[i].vy - (dy * b[j].mass * mag);
            b[i].vz := b[i].vz - (dz * b[j].mass * mag);

            b[j].vx := b[j].vx + (dx * b[i].mass * mag);
            b[j].vy := b[j].vy + (dy * b[i].mass * mag);
            b[j].vz := b[j].vz + (dz * b[i].mass * mag);
         end;
      end;

      for i := 0 to n do
         b[i].x := b[i].x + (dt * b[i].vx);
         b[i].y := b[i].y + (dt * b[i].vy);
         b[i].z := b[i].z + (dt * b[i].vz);
      end;
   end Advance;

   procedure {public} Energy(): real;
   var
      e, dx, dy, dz, distance: real;
      i, j, n: integer;
   begin
      e := 0.0;
      n := len(b) - 1;
      for i := 0 to n do
         e := e + (0.5 * b[i].mass *
            ( b[i].vx * b[i].vx
            + b[i].vy * b[i].vy
            + b[i].vz * b[i].vz ));
	 	 	
         for j := i+1 to n do
            dx := b[i].x - b[j].x;
            dy := b[i].y - b[j].y;
            dz := b[i].z - b[j].z;

            distance := M.Sqrt(dx*dx + dy*dy + dz*dz);	
            e := e - (b[i].mass * b[j].mass / distance);	
         end;
      end;
      return e;
   end Energy;

begin
   b[0] := B.Sun;
   b[1] := B.Jupiter; 
   b[2] := B.Saturn;
   b[3] := B.Uranus; 
   b[4] := B.Neptune;
end NBodySystem;


var 
   bodies: NBodySystem;
   i,n: integer;
begin
   bodies := new NBodySystem();
   bodies.OffsetMomentum();
   n := BenchmarksGame.argi();

   C.WriteLine("{0:f9}", bodies.Energy()); 
   for i := 1 to n do bodies.Advance(0.01); end;
   C.WriteLine("{0:f9}", bodies.Energy()); 

end nbody.


module JovianBodies;

const PI = 3.141592653589793;	
const SOLAR_MASS = 4 * PI * PI;
const DAYS_PER_YEAR = 365.24;

type {public,ref} Body = object
   var {public} x, y, z, vx, vy, vz, mass: real;

   procedure {public} OffsetMomentum(px, py, pz: real);
      begin
         vx := -1.0 * px / SOLAR_MASS;
         vy := -1.0 * py / SOLAR_MASS;
         vz := -1.0 * pz / SOLAR_MASS;	      
      end OffsetMomentum;
end Body;


var {public} Jupiter, Saturn, Uranus, Neptune, Sun: Body;		

begin
   Jupiter := new Body();
   Jupiter.x := 4.84143144246472090E+00;
   Jupiter.y := -1.16032004402742839E+00;
   Jupiter.z := -1.03622044471123109E-01;
   Jupiter.vx := 1.66007664274403694E-03 * DAYS_PER_YEAR;
   Jupiter.vy := 7.69901118419740425E-03 * DAYS_PER_YEAR;
   Jupiter.vz := -6.90460016972063023E-05 * DAYS_PER_YEAR;
   Jupiter.mass := 9.54791938424326609E-04 * SOLAR_MASS;

   Saturn := new Body();
   Saturn.x := 8.34336671824457987E+00;
   Saturn.y := 4.12479856412430479E+00;
   Saturn.z := -4.03523417114321381E-01;
   Saturn.vx := -2.76742510726862411E-03 * DAYS_PER_YEAR;
   Saturn.vy := 4.99852801234917238E-03 * DAYS_PER_YEAR;
   Saturn.vz := 2.30417297573763929E-05 * DAYS_PER_YEAR;
   Saturn.mass := 2.85885980666130812E-04 * SOLAR_MASS;

   Uranus := new Body();
   Uranus.x := 1.28943695621391310E+01;
   Uranus.y := -1.51111514016986312E+01;
   Uranus.z := -2.23307578892655734E-01;
   Uranus.vx := 2.96460137564761618E-03 * DAYS_PER_YEAR;
   Uranus.vy := 2.37847173959480950E-03 * DAYS_PER_YEAR;
   Uranus.vz := -2.96589568540237556E-05 * DAYS_PER_YEAR;
   Uranus.mass := 4.36624404335156298E-05 * SOLAR_MASS;

   Neptune := new Body();
   Neptune.x := 1.53796971148509165E+01;
   Neptune.y := -2.59193146099879641E+01;
   Neptune.z := 1.79258772950371181E-01;
   Neptune.vx := 2.68067772490389322E-03 * DAYS_PER_YEAR;
   Neptune.vy := 1.62824170038242295E-03 * DAYS_PER_YEAR;
   Neptune.vz := -9.51592254519715870E-05 * DAYS_PER_YEAR;
   Neptune.mass := 5.15138902046611451E-05 * SOLAR_MASS;	

   Sun := new Body();
   Sun.mass := SOLAR_MASS;

end JovianBodies.
(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module nsieve;
import System.Console as C, BenchmarksGame;

procedure sieve(m: integer; var isPrime: Vector) : integer; 
var 
   i, k, count : integer;
begin
   for i := 2 to m do isPrime[i] := true; end;
   count := 0;

   for i := 2 to m do 
      if isPrime[i] then
         k := i+i;
         while k <= m do
            isPrime[k] := false;
            inc(k,i);
         end;
         inc(count);
      end;
   end;
   return count;
end sieve;


type
   Vector = array * of boolean;
var 
   i, m, n : integer;
   flags : Vector;
begin 
   n := BenchmarksGame.argi();
   m := integer(2.0 ** n) * 10000;
   flags := new Vector(m+1);

   for i := 0 to 2 do 
      m := integer(2.0 ** (n-i)) * 10000;
      C.WriteLine("Primes up to {0,8:D} {1,8:D}", m, sieve(m,flags));
   end;
end nsieve.

(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module partialsums;
import 
   System.Math as M,
   System.Console as C, 
   BenchmarksGame;

const twothirds = 2.0/3.0;
var
   a1, a2, a3, a4, a5, a6, a7, a8, a9, alt: real;
   k,n: integer;
   k2, k3, sk, ck: real; 
begin
   n := BenchmarksGame.argi();
   alt := -1.0;
   for k := 1 to n do
      k2 := M.Pow(k,2); k3 := k2*k;
      sk := M.Sin(k); ck := M.Cos(k);
      (* alt := ~alt; *) alt := -1.0 * alt;

      a1 := a1 + M.Pow(twothirds,k-1);
      a2 := a2 + M.Pow(k,-0.5);
      a3 := a3 + 1.0/(k*(k+1.0));
      a4 := a4 + 1.0/(k3 * sk*sk);
      a5 := a5 + 1.0/(k3 * ck*ck);
      a6 := a6 + 1.0/k;
      a7 := a7 + 1.0/k2;
      a8 := a8 + alt/k;
      a9 := a9 + alt/(2.0*k -1.0);
   end;

   C.Write("{0:f9}", a1); write(9X:1); writeln("(2/3)^k");
   C.Write("{0:f9}", a2); write(9X:1); writeln("k^-0.5");
   C.Write("{0:f9}", a3); write(9X:1); writeln("1/k(k+1)");
   C.Write("{0:f9}", a4); write(9X:1); writeln("Flint Hills");
   C.Write("{0:f9}", a5); write(9X:1); writeln("Cookson Hills");
   C.Write("{0:f9}", a6); write(9X:1); writeln("Harmonic");
   C.Write("{0:f9}", a7); write(9X:1); writeln("Riemann Zeta");
   C.Write("{0:f9}", a8); write(9X:1); writeln("Alternating Harmonic");
   C.Write("{0:f9}", a9); write(9X:1); writeln("Gregory");
end partialsums.
(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module recursive;
import 
   System.Math as M,
   System.Console as C, 
   BenchmarksGame;

procedure Ack (m, n: integer): integer;
begin
   if m=0 then return n+1; end;
   if n=0 then return Ack(m-1, 1); end;
   return Ack(m-1, Ack(m, n-1));
end Ack;

procedure Fib (n: integer): integer;
begin
   if n<2 then return 1; else return Fib(n-2) + Fib(n-1); end;
end Fib;

procedure Tak (x,y,z: integer) : integer;
begin
   if y<x then return Tak(Tak(x-1,y,z), Tak(y-1,z,x), Tak(z-1,x,y)); 
   else return z; end;	
end Tak;

procedure Fibr (n: real): real;
begin
   if n<2.0 then return 1.0; 
   else return Fibr(n-2.0) + Fibr(n-1.0); end;
end Fibr;

procedure Takr (x,y,z: real) : real;
begin
   if y<x then return 
      Takr( Takr(x-1.0,y,z), Takr(y-1.0,z,x), Takr(z-1.0,x,y) ); 
   else return z; end;	
end Takr;

var
   n: integer; 
begin
   n := BenchmarksGame.argi();
   C.WriteLine("Ack(3,{0}): {1}", n, Ack(3, n));
   C.WriteLine("Fib({0:f1}): {1:f1}", 27.0+n, Fibr(27.0+n));
   dec(n); C.WriteLine("Tak({0},{1},{2}): {3}", 3*n,2*n,n, Tak(3*n,2*n,n)); 

   C.WriteLine("Fib(3): {0}", Fib(3));
   C.WriteLine("Tak(3.0,2.0,1.0): {0:f1}",Takr(3.0,2.0,1.0));
end recursive.
(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module threadring;

import
   System.Threading as T,
   System.Console as C,
   BenchmarksGame;

type {public, ref} NamedThread = object (name : integer)
   var 
      signal : T.AutoResetEvent;
      token : integer;

   activity Run;
   begin 
      while TokenNotDone() do 
         NextThread().TakeToken(token-1);
      end;
      if token = 0 then C.WriteLine("{0}", name); end;
      NextThread().TakeToken(-1);
   end Run;

   procedure TokenNotDone : boolean;
   begin
      signal.WaitOne();
      return token > 0;
   end Take;

   procedure NextThread : NamedThread;
   begin 
      return threadRing[ name mod numberOfThreads ]; 
   end NextThread;

   procedure {public} TakeToken(x : integer);
   begin
      token := x;
      signal.Set();
   end TakeToken;

begin
   signal := new T.AutoResetEvent(false);
   token := 0;
   (* new Run(); *)
end NamedThread;


const numberOfThreads = 503;

var 
   threadRing : array numberOfThreads of NamedThread;
   i : integer;

begin 
   for i := 0 to numberOfThreads-1 do 
      threadRing[i] := new NamedThread(i+1); 
   end;

   (* seems a little faster to wait until now to start threads *)
   for i := 0 to numberOfThreads-1 do  
      new threadRing[i].Run(); 
   end;

   threadRing[0].TakeToken( BenchmarksGame.argi() );
end threadring.


(* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   contributed by Isaac Gouy
*)

module threadring;

import
   System.Console as C,
   BenchmarksGame;

protocol TokenProtocol = (token = integer);

activity NamedThread(name : integer) implements TokenProtocol;
var 
   token : integer;
begin     
   loop 
      accept token;
      if token > 0 then
         NextThreadTake(name, token-1);
      else
         if token = 0 then C.WriteLine("{0}", name); end;
         NextThreadTake(name, -1);
         exit;
      end;
   end;
end NamedThread;


procedure NextThreadTake(name, token : integer);
var 
   nextThread : NamedThread;
begin 
   (* 
   (threadRing[ name mod numberOfThreads ])(token);
   "Sorry, Calls like (a+b).method not implemented yet"
   *)

   nextThread := threadRing[ name mod numberOfThreads ]; 
   nextThread(token);
end NextThreadTake;


const numberOfThreads = 503;

var 
   thread : NamedThread;
   threadRing : array numberOfThreads of NamedThread;
   i : integer;

begin 
   for i := 0 to numberOfThreads-1 do 
      threadRing[i] := new NamedThread(i+1); 
   end;

   (* (threadRing[0])( BenchmarksGame.argi() ); *)

   thread := threadRing[0];
   thread( BenchmarksGame.argi() );
end threadring.


