"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=binarytrees.st *"!

Object subclass:#TreeNode
   instanceVariableNames:'left right item'
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!TreeNode class methodsFor:'benchmarks-game'!
main   self binarytrees: Smalltalk commandLineArguments last asNumber to: Stdout
!

binarytrees: n to: output   | minDepth maxDepth stretchDepth check longLivedTree iterations |   minDepth := 4.   maxDepth := minDepth + 2 max: n.   stretchDepth := maxDepth + 1.   check := (TreeNode bottomUpTree: 0 depth: stretchDepth) itemCheck.   output      nextPutAll: 'stretch tree of depth '; print: stretchDepth; tab;      nextPutAll: ' check: '; print: check; cr.   longLivedTree := TreeNode bottomUpTree: 0 depth: maxDepth.   minDepth to: maxDepth by: 2 do: [:depth|      iterations := 1 bitShift: maxDepth - depth + minDepth.      check := 0.      1 to: iterations do: [:i|         check := check + (TreeNode bottomUpTree: i depth: depth) itemCheck.         check := check + (TreeNode bottomUpTree: -1*i depth: depth) itemCheck         ].      output         print:  (2*iterations); tab;         nextPutAll: ' trees of depth '; print: depth; tab;         nextPutAll: ' check: '; print: check; cr      ].   output      nextPutAll: 'long lived tree of depth '; print: maxDepth; tab;      nextPutAll: ' check: '; print: longLivedTree itemCheck; cr
! !

!TreeNode methodsFor: 'initialize-release'!left: leftChild right: rightChild item: anItem   left := leftChild.   right := rightChild.   item := anItem
! !!TreeNode methodsFor: 'accessing'!itemCheck   ^left isNil       ifTrue: [item] ifFalse: [item + (left itemCheck - right itemCheck)]
! !!TreeNode class methodsFor: 'instance creation'!bottomUpTree: anItem depth: anInteger   ^(anInteger > 0)       ifTrue: [         self             left: (self bottomUpTree: 2*anItem - 1 depth: anInteger - 1)             right: (self bottomUpTree: 2*anItem depth: anInteger - 1)              item: anItem         ]      ifFalse: [self left: nil right: nil item: anItem]
!left: leftChild right: rightChild item: anItem         ^(super new) left: leftChild right: rightChild item: anItem
! !

"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Paolo Bonzini
    modified by Eliot Miranda *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmark-games'
!

!Tests class methodsFor:'benchmarks-game'!

chameneos: n
    | c1 c2 c3 c4 mp |
    c1 := Chameleon color: #blue.
    c2 := Chameleon color: #red.
    c3 := Chameleon color: #yellow.
    c4 := Chameleon color: #blue.
    mp := MeetingPlace forMeetings: n.
    c1 fork: mp.
    c2 fork: mp.
    c3 fork: mp.
    c4 fork: mp.
    c1 wait.
    c2 wait.
    c3 wait.
    c4 wait.
    ^c1 meetings + c2 meetings + c3 meetings + c4 meetings
!

main
    Stdout print: (self chameneos: Smalltalk commandLineArguments last asNumber); cr
! !

"* SPLITFILE=Chameleon.st *"!

Object subclass: #Chameleon
   instanceVariableNames: 'meetings color semaphore waitingForPair'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'benchmarks-game'
!

!Chameleon class methodsFor:'instance creation'!
color: c
    ^self new
        initialize;
        color: c
! !


!Chameleon methodsFor:'initialize-release'!
initialize
    meetings := 0.
    waitingForPair := Semaphore new.
    semaphore := Semaphore new
! !

!Chameleon methodsFor:'changing colours'!
color: c
    color := c
! 

fade
    color := #faded.
    waitingForPair signal.
    semaphore signal
!

met: other
    | newColor |
    meetings := meetings + 1.
    color == #red ifTrue: [
    newColor := other == #yellow ifTrue: [ #blue ] ifFalse: [ #yellow ] ].
    color == #yellow ifTrue: [
    newColor := other == #red ifTrue: [ #blue ] ifFalse: [ #red ] ].
    color == #blue ifTrue: [
    newColor := other == #red ifTrue: [ #yellow ] ifFalse: [ #red ] ].
    color := newColor.
    waitingForPair signal
! !

!Chameleon methodsFor:'running'!
fork: meetingPlace
    ^[ self run: meetingPlace ] fork
!

run: meetingPlace
    [ color == #faded ] whileFalse: [
        meetingPlace reachedBy: self.
        waitingForPair wait ]
! !

!Chameleon methodsFor:'accessing'!
color
    ^color
!

meetings
    ^meetings
!

wait
    semaphore wait
! !

"* SPLITFILE=MeetingPlace.st *"!

Object subclass: #MeetingPlace
   instanceVariableNames: 'mutex first total max'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'benchmarks-game'
!

!MeetingPlace class methodsFor:'instance creation'!
forMeetings: maxMeetings
    ^super new
        initialize;
        max: maxMeetings;
        yourself
! !

!MeetingPlace methodsFor:'initialize-release'!
initialize
    mutex := Semaphore forMutualExclusion.
    total := 0
! !

!MeetingPlace methodsFor:'running'!
max: maxMeetings
    max := maxMeetings
!

organizeMeetingWith: second
    total >= max
        ifTrue: [
            first fade.
            second fade ]
        ifFalse: [
            first met: second color.
            second met: first color ].
    total := total + 1
!

reachedBy: chameleon
    mutex critical: [
        first isNil
            ifTrue: [ first := chameleon ]
            ifFalse: [ self organizeMeetingWith: chameleon. first := nil ] ]
! !



"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Paolo Bonzini *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!

main
   | n f |
   n := Smalltalk commandLineArguments last asNumber.
   f := self fannkuch: n to: Stdout.
   Stdout
      nextPutAll: 'Pfannkuchen(', n printString, ') = ';
      print: f; cr.
!

fannkuch: n to: output
   ^(PermGenerator new: n) maxPfannkuchenTo: output
! !

"* SPLITFILE=PermGenerator.st *"!

Object subclass:#PermGenerator
   instanceVariableNames:'timesRotated perm atEnd'
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!PermGenerator class methodsFor:'instance creation'!

new: size
   ^self new
      initialize: size;
      yourself
! !

!PermGenerator methodsFor:'initialize-release'!

initialize: size
   perm := (1 to: size) asArray.
   timesRotated := Array new: size withAll: 0.
   atEnd := false
! !

!PermGenerator methodsFor:'accessing'!

atEnd
   ^atEnd
!

next
   | result |
   result := perm copy.
   self makeNext.
   ^result
! !

!PermGenerator methodsFor:'benchmarks-game'!

maxPfannkuchenTo: output
   | max permutation check |
   max := 0.
   check := 0.
   [self atEnd] whileFalse:
      [permutation := self next.
      check < 30 ifTrue:
         [permutation do: [:each | output print: each].
         output cr.
         check := check + 1].
      max := max max: (self pfannkuchen: permutation)].
   ^max
!

pfannkuchen: anArray
   | first complement a b k |
   k := 0.
   [ (first := anArray at: 1) == 1 ] whileFalse: [
      k := k + 1.
      complement := first + 1.
      1 to: first // 2 do: [ :i |
         a := anArray at: i.
         b := anArray at: complement - i.
         anArray at: i put: b.
         anArray at: complement - i put: a.
      ]
   ].
   ^k
!

makeNext
   | temp remainder |
   "* Generate the next permutation. *"
   2 to: perm size do: [ :r |
      "* Rotate the first r items to the left. *"
      temp := perm at: 1.
      1 to: r - 1 do: [ :i | perm at: i put: (perm at: i + 1) ].
      perm at: r put: temp.

      remainder := timesRotated at: r put: ((timesRotated at: r) + 1) \\ r.
      remainder = 0 ifFalse: [ ^self ].

      "* After r rotations, the first r items are in their original positions.
      Go on rotating the first r+1 items. *"
   ].

   "* We are past the final permutation. *"
   atEnd := true
! !
"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

"* SPLITFILE=Tests.st *"!

Object subclass: #Tests   instanceVariableNames: ''   classVariableNames: ''   poolDictionaries: ''
   category:'benchmarks-game'
!

!Tests class methodsFor: 'benchmarks-game'!

writeFasta: aString from: inStream to: outStream lineLength: lineLength
   | i |
   outStream nextPut: $>; nextPutAll: aString; cr.
   i := 0.
   [inStream atEnd] whileFalse:
      [i == lineLength ifTrue: [outStream cr. i := 0].
      outStream nextPut: inStream next.
      i := i + 1].
   outStream cr
!

fasta: n to: out
   | r lineLength |
   lineLength := 60.
   self
      writeFasta: 'ONE Homo sapiens alu'
      from:
         ( RepeatStream
            to: n*2
            on:'GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG',
               'GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA',
               'CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT',
               'ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA',
               'GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG',
               'AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC',
               'AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA' )
      to: out
      lineLength: lineLength.

   r := RandomNumber to: 1. "* Shared random sequence *"

   self
      writeFasta: 'TWO IUB ambiguity codes'
      from:
         (( RandomStream
            to: n*3
            on: #(   #($a 0.27d0)
                  #($c 0.12d0)
                  #($g 0.12d0)
                  #($t 0.27d0)

                  #($B 0.02d0)
                  #($D 0.02d0)
                  #($H 0.02d0)
                  #($K 0.02d0)
                  #($M 0.02d0)
                  #($N 0.02d0)
                  #($R 0.02d0)
                  #($S 0.02d0)
                  #($V 0.02d0)
                  #($W 0.02d0)
                  #($Y 0.02d0)))
         random: r;
         yourself)
      to: out
      lineLength: lineLength.

   self
      writeFasta: 'THREE Homo sapiens frequency'
      from:
         (( RandomStream
            to: n*5
            on: #(   #($a 0.3029549426680d0)
                  #($c 0.1979883004921d0)
                  #($g 0.1975473066391d0)
                  #($t 0.3015094502008d0)))
            random: r;
            yourself)
      to: out
      lineLength: lineLength.

   out flush
!

main
   RandomNumber initialize.   self fasta: Smalltalk commandLineArguments last asNumber to: Stdout! !


"* SPLITFILE=RandomNumber.st *"!

Object subclass: #RandomNumber   instanceVariableNames: 'seed scale'   classVariableNames: 'FModulus Increment Modulus Multiplier'   poolDictionaries: ''
   category:'benchmarks-game'
!

!RandomNumber class methodsFor: 'class initialization'!initialize   FModulus := 139968.0.   Increment := 29573.   Modulus := 139968.   Multiplier := 3877.
! !!RandomNumber class methodsFor: 'initialize-release'!to: anInteger   ^self basicNew to: anInteger
! !

!RandomNumber methodsFor: 'accessing'!next   seed := (seed * Multiplier + Increment) \\ Modulus.   ^(seed * scale) / FModulus
! !

!RandomNumber methodsFor: 'private'!to: anInteger   seed := 42.   scale := anInteger
! !


"* SPLITFILE=RepeatStream.st *"!

ReadStream subclass: #RepeatStream
   instanceVariableNames:'repeatPtr repeatLimit'
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!RepeatStream class methodsFor: 'instance creation'!to: anInteger on: aCollection   ^(super on: aCollection) to: anInteger
! !

!RepeatStream methodsFor: 'initialize-release'!to: anInteger   repeatPtr := 0.   repeatLimit := anInteger
! !

!RepeatStream methodsFor: 'accessing'!next   position >= readLimit ifTrue: [ self position: 0 ].   repeatPtr := repeatPtr + 1.   ^collection at: (position := position + 1)
! !!RepeatStream methodsFor: 'testing'!atEnd   ^repeatPtr >= repeatLimit
! !

"* SPLITFILE=RandomStream.st *"!

RepeatStream subclass: #RandomStream
   instanceVariableNames:'random percentages'
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!RandomStream methodsFor: 'initialize-release'!on: aCollection   | size cp |   repeatPtr := 0.   random := RandomNumber to: 1.0.   size := aCollection size.   percentages := Array new: size.   collection := Array new: size.   cp := 0.0.   1 to: size do: [:i|      collection at: i put: (aCollection at: i) first.      percentages at: i put: (cp := cp + (aCollection at: i) last).   ]
! !!RandomStream methodsFor: 'accessing'!next   | r |   r := random next.   repeatPtr := repeatPtr + 1.   1 to: percentages size do: [:i|      (r < (percentages at: i)) ifTrue: [^collection at: i]]
!random: aRandomNumber"* Share the random number generator so we can get the expected results. *"   random := aRandomNumber
! !





"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=hello.st *"! 

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!
main
    'hello world' printCR ! !

"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor: 'benchmarks-game'!

substringFrequencies: aString for: aLength using: aDictionary
   | m |
   m := aString size - aLength + 1.
   1 to: m do: [:i | | fragment |
      fragment := aString copyFrom: i to: i + aLength - 1.

      aDictionary at: fragment put: 
         (aDictionary at: fragment ifAbsent: [0]) + 1 
   ].
   ^aDictionary
!
readFasta: sequenceName from: input
   | prefix newline buffer description line char |
   prefix := '>',sequenceName.
   newline := Character lf.

   "* find start of particular fasta sequence *"
   [(input atEnd) or: [
         (input peek = $>) 
            ifTrue: [((line := input upTo: newline) 
               indexOfSubCollection: prefix startingAt: 1) = 1]
            ifFalse: [(input skipTo: newline) = false]]
      ] whileFalse.

   "* line-by-line read - it would be a lot faster to block read *"
   description := line.
   buffer := ReadWriteStream on: (String new: 1028).
   [(input atEnd) or: [(char := input peek) = $>]] whileFalse: [
      (char = $;) 
         ifTrue: [input upTo: newline] 
         ifFalse: [buffer nextPutAll: (input upTo: newline)]
      ].
   ^Association key: description value: buffer contents
!

knucleotideFrom: input to: output
   | sequence newline writeFrequencies writeCount |

   sequence := (self readFasta: 'THREE' from: input) value asUppercase.
   newline := Character lf.

   writeFrequencies :=
      [:k | | frequencies count |
      frequencies := SortedCollection sortBlock: [:a :b|
         (a value = b value) ifTrue: [b key < a key] ifFalse: [b value < a value]].

      count := 0.0.
      (self substringFrequencies: sequence for: k using: Dictionary new)
         associationsDo: [:each|
            frequencies add: each. count := count + each value].

      frequencies do: [:each | | percentage |
         percentage := (each value / count) * 100.0.
         output 
            nextPutAll: each key; space;
            nextPutAll: (percentage printfPrintString:'%0.3f'); cr]].

   writeCount := [:nucleotideFragment | | frequencies count |
      frequencies := self substringFrequencies: sequence 
         for: nucleotideFragment size
         using: Dictionary new.
      count := frequencies at: nucleotideFragment ifAbsent: [0].
      output print: count; tab; nextPutAll: nucleotideFragment; cr].

   writeFrequencies value: 1. output cr.
   writeFrequencies value: 2. output cr.

   writeCount value: 'GGT'.
   writeCount value: 'GGTA'.
   writeCount value: 'GGTATT'.
   writeCount value: 'GGTATTTTAATT'.
   writeCount value: 'GGTATTTTAATTTATAGT'.
!

main
   self knucleotideFrom: Stdin to: Stdout.
! !
"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Paolo Bonzini *"!

"* SPLITFILE=mandelbrot.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'!

!Tests class methodsFor: 'benchmarks-game'!mandelbrot: extent to: output   | limit2 m bits zr zi cr ci i tr stepr stepi |   limit2 := 4.0.
   m := 50.
   stepr := 2.0 / extent.
   stepi := 2.0 / extent.

   0 to: extent - 1 do: [ :y |
       bits := 0.
       ci := stepi * y asFloat - 1.0.
       0 to: extent - 1 do: [ :x |
           cr := stepr * x asFloat - 1.5.
           zr := cr. zi := ci.

           bits := bits bitShift: 1.
           i := 1.  
           [
               tr := (zr*zr) - (zi*zi) + cr.
               zi := 2.0 * zr * zi + ci.
               zr := tr.
               (zr*zr) + (zi*zi) < limit2 and: [ (i := i + 1) < m ]
           ] whileTrue.

           i = m ifTrue: [ bits := bits + 1 ].
           (x bitAnd: 7) == 7 ifTrue: [
               output nextPut: bits.
               bits := 0.
           ]
       ]. 
       (extent bitAnd: 7) == 0 ifFalse: [
           bits := bits bitShift: 8 - (extent bitAnd: 7).
           output nextPut: bits.
       ]
   ]
!
main   | n |   n := Smalltalk commandLineArguments last asNumber.   Stdout      nextPutAll: 'P4'; cr; print: n; space; print: n; cr;
      binary.   self mandelbrot: n to: Stdout
! !
"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Paolo Bonzini *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!

message: n   | tail head sum |   head := tail := Consumer new.   500 timesRepeat: [head := ProducerConsumer fork: head].   sum := 0.   n timesRepeat:      [head msg: 0.      sum := sum + tail msg].   ^sum
!

main
    Stdout print: (self message: Smalltalk commandLineArguments last asNumber); cr
! !

"* SPLITFILE=Consumer.st *"

Object subclass: #Consumer
   instanceVariableNames: 'semaphore msg'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'benchmarks-game'
!

!Consumer class methodsFor:'instance creation'!
new    | var |    var := self basicNew.    var semaphore: Semaphore new.    ^var
! !

!Consumer methodsFor:'accessing'!
msg    semaphore wait.    ^msg
!

msg: data    msg := data.    semaphore signal
!

semaphore: aSemaphore    semaphore := aSemaphore
! !

"* SPLITFILE=ProducerConsumer.st *"

Consumer subclass: #ProducerConsumer
   instanceVariableNames: 'consumer'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'benchmarks-game'
!

!ProducerConsumer class methodsFor:'instance creation'!
fork: consumer    | proc |    proc := self new.    proc consumer: consumer.    proc fork.    ^proc
! !


!ProducerConsumer methodsFor:'accessing'!
consumer: aProcess    consumer := aProcess
!

fork    [ self run ] fork
! 

run    [ consumer msg: self msg + 1 ] repeat
! !


"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=Body.st *"!

Object subclass:#Body
	instanceVariableNames:'x y z vx vy vz mass'
	classVariableNames:''
	poolDictionaries:''
	category:'benchmarks-game'
!

!Body class methodsFor:'constants'!

daysPerYear
   ^365.24
!

jupiter
   ^self new
      x: 4.84143144246472090
      y: -1.16032004402742839
      z: -0.103622044471123109
      vx: 0.00166007664274403694 * self daysPerYear
      vy: 0.00769901118419740425 * self daysPerYear
      vz: -0.0000690460016972063023 * self daysPerYear
      mass: 0.000954791938424326609 * self solarMass
!

neptune
   ^self new
      x: 1.53796971148509165e1
      y: -2.59193146099879641e1
      z: 0.179258772950371181
      vx: 0.00268067772490389322 * self daysPerYear
      vy: 0.00162824170038242295 * self daysPerYear
      vz: -0.0000951592254519715870 * self daysPerYear
      mass: 0.0000515138902046611451 * self solarMass
!

pi
   ^3.141592653589793
!

saturn
   ^self new
      x: 8.34336671824457987
      y: 4.12479856412430479
      z: -0.403523417114321381
      vx: -0.00276742510726862411 * self daysPerYear
      vy: 0.00499852801234917238 * self daysPerYear
      vz: 0.0000230417297573763929 * self daysPerYear
      mass: 0.000285885980666130812 * self solarMass
!

solarMass
   ^4.0 * self pi * self pi
!

sun
   ^self new
      x: 0.0
      y: 0.0
      z: 0.0
      vx: 0.0
      vy: 0.0
      vz: 0.0
      mass: self solarMass
!

uranus
   ^self new
      x: 1.28943695621391310e1
      y: -1.51111514016986312e1
      z: -0.223307578892655734
      vx: 0.00296460137564761618 * self daysPerYear
      vy: 0.00237847173959480950 * self daysPerYear
      vz: -0.0000296589568540237556 * self daysPerYear
      mass: 0.0000436624404335156298 * self solarMass
! !

!Body methodsFor:'accessing'!

mass
   ^mass
!

x
   ^x
!

x: d1 y: d2 z: d3 vx: d4 vy: d5 vz: d6 mass: d7
   x := d1.
   y := d2. 
   z := d3. 
   vx := d4.
   vy := d5.
   vz := d6.
   mass := d7
!

y
   ^y
!

z
   ^z
! !

!Body methodsFor:'benchmarks-game'!

addMomentumTo: anArray
   anArray at: 1 put: (anArray at: 1) + (vx * mass).
   anArray at: 2 put: (anArray at: 2) + (vy * mass).
   anArray at: 3 put: (anArray at: 3) + (vz * mass).
   ^anArray
!

and: aBody velocityAfter: dt        
   | dx dy dz distance mag |
   dx := x - aBody x.
   dy := y - aBody y.
   dz := z - aBody z.
   
   distance := ((dx*dx) + (dy*dy) + (dz*dz)) sqrt.
   mag := dt / (distance * distance * distance).

   self decreaseVelocity: dx y: dy z: dz m: aBody mass * mag.   
   aBody increaseVelocity: dx y: dy z: dz m: mass * mag
!

decreaseVelocity: dx y: dy z: dz m: m
   vx := vx - (dx * m).
   vy := vy - (dy * m).
   vz := vz - (dz * m)
!

increaseVelocity: dx y: dy z: dz m: m
   vx := vx + (dx * m).
   vy := vy + (dy * m).
   vz := vz + (dz * m)
!

kineticEnergy
   ^0.5 * mass * ((vx * vx) + (vy * vy) + (vz * vz))
!

offsetMomentum: anArray 
   | m |
   m := self class solarMass.
   vx := (anArray at: 1) negated / m.
   vy := (anArray at: 2) negated / m.
   vz := (anArray at: 3) negated / m
!

positionAfter: dt
   x := x + (dt * vx).
   y := y + (dt * vy).
   z := z + (dt * vz)
!

potentialEnergy: aBody
   | dx dy dz distance |
   dx := x - aBody x.
   dy := y - aBody y.
   dz := z - aBody z.

   distance := ((dx*dx) + (dy*dy) + (dz*dz)) sqrt.
   ^mass * aBody mass / distance
! !

"* SPLITFILE=NBodySystem.st *"!

Object subclass:#NBodySystem
	instanceVariableNames:'bodies'
	classVariableNames:''
	poolDictionaries:''
	category:'benchmarks-game'
!

!NBodySystem class methodsFor:'benchmarks-game'!

main
   | bodies |
   bodies := NBodySystem new initialize.
   Stdout nextPutAll: (bodies energy printfPrintString:'%0.9f'); cr.
   Smalltalk commandLineArguments last asNumber 
      timesRepeat: [bodies after: 0.01].
   Stdout nextPutAll: (bodies energy printfPrintString:'%0.9f'); cr.
! !

!NBodySystem methodsFor:'benchmarks-game'!

after: dt
   1 to: bodies size do: [:i|
      i+1 to: bodies size do: [:j|                            
         (bodies at: i) and: (bodies at: j) velocityAfter: dt].
   ].   
   bodies do: [:each| each positionAfter: dt]
!

energy
   | e |
   e := 0.0.
   1 to: bodies size do: [:i|       
      e := e + (bodies at: i) kineticEnergy.

      i+1 to: bodies size do: [:j| 
         e := e - ((bodies at: i) potentialEnergy: (bodies at: j))].
   ].
   ^e
! !

!NBodySystem methodsFor:'initialize-release'!

initialize
   bodies := OrderedCollection new
      add: Body sun; add: Body jupiter; add: Body saturn;
      add: Body uranus; add: Body neptune; yourself.

   bodies first offsetMomentum:
      (bodies inject: (Array with: 0.0 with: 0.0 with: 0.0)
         into: [:m :each | each addMomentumTo: m])
! !



"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

"* SPLITFILE=nsieve.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor: 'benchmarks-game'!main   | n |   n := Smalltalk commandLineArguments last asNumber.   (n < 2) ifTrue: [n := 2].   self primeBenchmarkFor: n to: Stdout using: Array!
nsieve: n using: arrayClass    | count isPrime |   count := 0.   isPrime := arrayClass new: n withAll: true.   2 to: n do:      [:i |       (isPrime at: i) ifTrue:          [i + i to: n by: i do:            [:k | isPrime at: k put: false].         count := count + 1]].   ^count
!primeBenchmarkFor: v to: output using: arrayClass   v to: v - 2 by: -1 do:      [:n| | m |      m := (2 raisedTo: n) * 10000.      output nextPutAll: 'Primes up to '. 
      m printOn: output paddedWith: $ to: 8 base: 10.
      (self nsieve: m using: arrayClass) printOn: output paddedWith: $  to: 9 base: 10.
      output cr
      ]
! !

"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

"* SPLITFILE=nsievebits.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor: 'benchmarks-game'!main   | n |   n := Smalltalk commandLineArguments last asNumber.   (n < 2) ifTrue: [n := 2].   self primeBenchmarkFor: n to: Stdout using: BitArray!
nsieve: n using: arrayClass    | count isPrime |   count := 0.   isPrime := arrayClass new: n withAll: 1.   2 to: n do:      [:i |       (1 == (isPrime at: i)) ifTrue:          [i + i to: n by: i do:            [:k | isPrime at: k put: 0].         count := count + 1]].   ^count
!primeBenchmarkFor: v to: output using: arrayClass   v to: v - 2 by: -1 do:      [:n| | m |      m := (2 raisedTo: n) * 10000.      output nextPutAll: 'Primes up to '. 
      m printOn: output paddedWith: $ to: 8 base: 10.
      (self nsieve: m using: arrayClass) printOn: output paddedWith: $  to: 9 base: 10.
      output cr
      ]
! !

"* The Computer Language Benchmark Games
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'!

!Tests class methodsFor: 'benchmarks-game'!
partialsums: n to: output   | a1 a2 a3 a4 a5 a6 a7 a8 a9 twothirds alt |   a1 := a2 := a3 := a4 := a5 := a6 := a7 := a8 := a9 := 0.0.   twothirds := 2.0/3.0.   alt := -1.0.   1.0 to: n do: [:k| | k2 k3 sk ck |      k2 := k*k.      k3 := k2*k.      sk := k sin.      ck := k cos.      alt := -1.0 * alt.      a1 := a1 + ([twothirds raisedTo: k - 1.0] on: GenericException do: [0.0]).      a2 := a2 + (k raisedTo: -0.5).      a3 := a3 + (1.0/(k*(k+1.0))).      a4 := a4 + (1.0/(k3*sk*sk)).      a5 := a5 + (1.0/(k3*ck*ck)).      a6 := a6 + (1.0/k).      a7 := a7 + (1.0/k2).      a8 := a8 + (alt/k).      a9 := a9 + (alt/(2.0*k - 1.0))].

   self print: a1 withName: '(2/3)^k' to: output.
   self print: a2 withName: 'k^-0.5' to: output.
   self print: a3 withName: '1/k(k+1)' to: output.
   self print: a4 withName: 'Flint Hills' to: output.
   self print: a5 withName: 'Cookson Hills' to: output.
   self print: a6 withName: 'Harmonic' to: output.
   self print: a7 withName: 'Riemann Zeta' to: output.
   self print: a8 withName: 'Alternating Harmonic' to: output.
   self print: a9 withName: 'Gregory' to: output 
!

print: number withName: name to: output
   output nextPutAll: (number printfPrintString:'%0.9f'); tab; nextPutAll: name; cr
!
main   self partialsums: Smalltalk commandLineArguments last asFloat to: Stdout 
! !
"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!

pidigitsTo: v width: width to: output   | n i pidigits |   n := v.   i := 0.   pidigits := PiDigitSpigot new.   [n > 0] whileTrue:      [n < width         ifTrue:            [n timesRepeat: [output nextPut: (Character digitValue: pidigits next)].            n to: width do: [:each | output space].            i := i + n]         ifFalse:            [width timesRepeat: [output nextPut: (Character digitValue: pidigits next)].            i := i + width].
      output tab; nextPut: $:; print: i; cr.
      n := n - width]
!

main
   self pidigitsTo: Smalltalk commandLineArguments last asNumber width: 10 to: Stdout.
! !

"* SPLITFILE=PiDigitSpigot.st *"!

Object subclass: #PiDigitSpigot
   instanceVariableNames: 'z x inverse'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'benchmarks-game'
!

!PiDigitSpigot class methodsFor: 'instance creation'!new   ^super new initialize! !

!PiDigitSpigot methodsFor:'private'!
consume: aTransformation   ^z * aTransformation
!

digit   ^(z extract: 3) floor
!

isSafe: aDigit   ^aDigit = (z extract: 4) floor
!

produce: anInteger   inverse q: 10 r: -10 * anInteger s: 0 t: 1.   ^inverse * z
! !

!PiDigitSpigot methodsFor:'accessing'!
next   | y |   ^(self isSafe: (y := self digit))      ifTrue: [z := self produce: y. y]      ifFalse: [z := self consume: x next. self next]
! !

!PiDigitSpigot methodsFor: 'initialize-release'!initialize   z := Transformation unity.   x := Transformation new.   inverse := Transformation new.
! !

"* SPLITFILE=Transformation.st *"!

Object subclass: #Transformation
   instanceVariableNames: 'q r s t k'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'benchmarks-game'
!

!Transformation class methodsFor:'instance creation'!
new   ^super new initialize
!

q: anInteger1 r: anInteger2 s: anInteger3 t: anInteger4   ^(super new) q: anInteger1 r: anInteger2 s: anInteger3 t: anInteger4
!

unity   ^self q: 1 r: 0 s: 0 t: 1
! !

!Transformation methodsFor:'initialize-release'!
initialize   q := 0.   r := 0.   s := 0.   t := 0.   k := 0.
! !

!Transformation methodsFor:'accessing'!
* aTransformation   ^self species       q: q * aTransformation q      r: q * aTransformation r + (r * aTransformation t)      s: s * aTransformation q + (t * aTransformation s)      t: s * aTransformation r + (t * aTransformation t)
! 

extract: anInteger   ^(q * anInteger + r) // (s * anInteger + t)
!

next   k := k +1.   q := k.   r := 4 * k + 2.   s := 0.   t := 2 * k + 1.
!

q   ^q
!

q: anInteger1 r: anInteger2 s: anInteger3 t: anInteger4   q := anInteger1.   r := anInteger2.   s := anInteger3.   t := anInteger4.   k := 0.
!

r   ^r
!

s   ^s
!

t   ^t
! !
"* The Computer Language Shootout
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmark-games'
!

!Tests class methodsFor:'benchmarks-game'!

ackx: x y: y   ^x == 0      ifTrue: [y+1]      ifFalse: [         y == 0            ifTrue:  [self ackx: x-1 y: 1]            ifFalse: [self ackx: x-1 y: (self ackx: x y: y-1)] 
      ]
!

fib: n   ^n < 2 ifTrue: [1] ifFalse: [(self fib: n-2) + (self fib: n-1)]
!

takx: x y: y z: z   ^y < x       ifTrue: [
         self 
            takx: (self takx: (x-1) y: y z: z) 
               y: (self takx: (y-1) y: z z: x) 
               z: (self takx: (z-1) y: x z: y)]      ifFalse: [z]
!


recursive: n to: output   | m f |

   output       nextPutAll: 'Ack(3,', n printString, '): '; print: (self ackx: 3 y: n); cr.

   output 
      nextPutAll: 'Fib('; print: 27.0 + n; nextPutAll: '): ';
      nextPutAll: ((self fib: 27.0 + n) asFloat printfPrintString:'%0.1f'); cr.

   m := n - 1.
   output       nextPutAll: 'Tak(', (3*m) printString, ',',                          (2*m) printString, ',', m printString, '): ',                            (self takx: 3*m y: 2*m z: m) printString; cr;

      nextPutAll: 'Fib(3): '; print: (self fib: 3); cr;

      nextPutAll: 'Tak(3.0,2.0,1.0): ';
      nextPutAll: ((self takx: 3.0 y: 2.0 z: 1.0) printfPrintString:'%0.1f'); cr
!



main
   Processor activeProcess setMaximumStackSize: 6000000.
   self recursive: Smalltalk commandLineArguments last asNumber to: Stdout
! !


"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy
    modified by Eliot Miranda *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor: 'benchmarks-game'!
reverseComplement: sequence named: sequenceName to: output
   | complement newline lineLength n |
   (sequenceName isNil) ifTrue: [^self].

   complement := String new: 128 withAll: $*.

   'ABCDGHKMNRSTVWY' with: 
   'TVGHCDMKNYSABWR'
      do: [:a :b| 
         complement 
            at: a asInteger put: b;
            at: a asLowercase asInteger put: b].

   newline := Character cr.
   lineLength := 60.
   n := sequence size.

   output nextPutAll: sequenceName; nextPut: newline.

   [n > 0] whileTrue: [ 
         1 to: ((n < lineLength) ifTrue: [n] ifFalse: [lineLength]) do:
            [:i | output nextPut: 
               (complement at: (sequence at: n - i + 1) asInteger)].
         output nextPut: newline.
         n := n - lineLength. 
      ] 
!readFasta: sequenceName from: input
   | prefix newline buffer description line char |
   prefix := '>',sequenceName.
   newline := Character cr.

   [(input atEnd) or: [
         (input peek = $>) 
            ifTrue: [((line := input upTo: newline) 
               indexOfSubCollection: prefix startingAt: 1) = 1]
            ifFalse: [(input skipThrough: newline) = false]]
      ] whileFalse.

   description := line.
   buffer := ReadWriteStream on: (String new: 1028).
   [(input atEnd) or: [(char := input peek) = $>]] whileFalse: [
      (char = $;) 
         ifTrue: [input upTo: newline] 
         ifFalse: [buffer nextPutAll: (input upTo: newline)]
      ].
   ^Association key: description value: buffer contents
!

main
   #('ONE' 'TWO' 'THREE') do:
      [:sequenceName|   | fasta |
         fasta := self readFasta: sequenceName from: Stdin.
         self reverseComplement: fasta value named: fasta key to: Stdout.
      ]. 
! !
"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!

i: x j: y
"* fixup one-based indexing to zero-based indexing - cleanup later *"   | i j | i := x - 1. j := y - 1.   ^1.0 / (i + j * (i + j + 1) /2  + i + 1) asFloat
!

multiplyAv: aDoubleArray   | n av |   n := aDoubleArray size.   av := DoubleArray new: n.   1 to: n do: [:i|          1 to: n do: [:j|         av at: i put: (av at: i) + ((self i: i j: j) * (aDoubleArray at: j)) ]].   ^av
!

multiplyAtv: aDoubleArray   | n atv |   n := aDoubleArray size.   atv := DoubleArray new: n.   1 to: n do: [:i|          1 to: n do: [:j|         atv at: i put: (atv at: i) + ((self i: j j: i) * (aDoubleArray at: j)) ]].   ^atv
!

multiplyAtAv: aDoubleArray   ^self multiplyAtv: (self multiplyAv: aDoubleArray)
!

spectralnorm: n   | u v vBv vv |   u := DoubleArray new: n withAll: 1.0.   v := DoubleArray new: n.   10 timesRepeat:      [v := self multiplyAtAv: u.       u := self multiplyAtAv: v].
   vBv := 0.0.   vv := 0.0.   1 to: n do:      [:i |       vBv := vBv + ((u at: i) * (v at: i)).       vv := vv + ((v at: i) * (v at: i))].   ^(vBv / vv) sqrt
!

main
   Stdout nextPutAll: 
      ((self spectralnorm: Smalltalk commandLineArguments last asNumber) 
         printfPrintString:'%0.9f'); cr.
! !


"* The Computer Language Benchmarks Game
    http://shootout.alioth.debian.org/
    contributed by Isaac Gouy *"!

"* SPLITFILE=Tests.st *"!

Object subclass:#Tests
   instanceVariableNames:''
   classVariableNames:''
   poolDictionaries:''
   category:'benchmarks-game'
!

!Tests class methodsFor:'benchmarks-game'!

main   | input sum |   input := Stdin.   sum := 0.   [input atEnd] whileFalse: [      sum := sum + (input upTo: Character cr) asNumber].
   sum printCR 
! !
