#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: ackermann.rep,v 1.1 2004-05-28 06:27:09 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (define (ack M N)
    (cond ((= M 0) (+ N 1))
	  ((= N 0) (ack (- M 1) 1))
	  (t (ack (- M 1) (ack M (- N 1))))))
  
  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (max-lisp-depth 2500)
    (format standard-output "Ack(3,%d): %d\n" n (ack 3 n))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: ary.rep,v 1.1 2004-05-28 06:39:25 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (x (make-vector n 0))
	 (y (make-vector n 0))
	 (last (- n 1)))
    (do ((i 0 (+ i 1)))
	((= i n))
      (aset x i (+ i 1)))
    (do ((k 0 (+ k 1)))
	((= k 1000))
      (do ((i last (- i 1)))
	  ((< i 0))
	(aset y i (+ (aref x i) (aref y i)))))
    (format standard-output "%d %d\n" (aref y 0) (aref y last))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: except.rep,v 1.1 2004-05-28 06:40:14 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (defvar HI 0)
  (defvar LO 0)
  
  (define (hi_ex val)
    (cons 'hi_ex val))
  
  (define (lo_ex val)
    (cons 'lo_ex val))
  
  (define (some_fun num)
    (catch #t
      (hi_fun num)))
  
  (define (hi_fun num)
    (let ((val (catch 'Hi_Exception (lo_fun num))))
      (if (and (consp val)
	       (eq (car val) 'hi_ex))
	  (setq HI (1+ HI)))))
  
  (define (lo_fun num)
    (let ((val (catch 'Lo_Exception (blowup num))))
      (if (and (consp val)
	       (eq (car val) 'lo_ex))
	  (setq LO (1+ LO)))))
  
  (define (blowup num)
    (if (= 0 (mod num 2))
	(throw 'Hi_Exception (hi_ex num))
      (throw 'Lo_Exception (lo_ex num))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (while (> n 0)
      (setq n (1- n))
      (some_fun n)))
  (format standard-output "Exceptions: HI=%d / LO=%d\n" HI LO))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: hash.rep,v 1.1 2004-05-28 06:49:27 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep
	rep.system
	rep.data.tables)
  
  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (last (- n 1))
	 (c 0)
	 (x (make-table string-hash eq-hash)))
    (do ((i 1 (+ i 1)))
	((> i n))
      (table-set x (number->string i 16) i))
    (do ((i last (- i 1)))
	((< i 0))
      (if (table-ref x (number->string i 10))
	  (setq c (+ c 1))))
    (format standard-output "%d\n" c)))


#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: hash2.rep,v 1.1 2004-05-28 06:50:22 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep
	rep.system
	rep.data.tables)
  
  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (hash1 (make-table string-hash eq-hash))
	 (hash2 (make-table string-hash eq-hash)))
    (do ((i 0 (+ i 1)))
	((= i 10000))
      (table-set hash1 (concat "foo_" (number->string i 10)) i))
    (do ((i 0 (+ i 1)))
	((= i n))
      (table-walk (lambda (key val)
		    (table-set hash2 key (+ val (or (table-ref hash2 key) 0))))
		  hash1))
    (format standard-output "%d %d %d %d\n"
	    (table-ref hash1 "foo_1")
	    (table-ref hash1 "foo_9999")
	    (table-ref hash2 "foo_1")
	    (table-ref hash2 "foo_9999"))))


#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: heapsort.rep,v 1.1 2004-05-28 06:57:37 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (define IM     139968)
  (define IA       3877)
  (define IC      29573)

  (define LAST 42)
  (define (gen_random max)
    (/ (* max (setq LAST (modulo (+ (* LAST IA) IC) IM))) IM))

  (define (heapsort n ra)
    (let ((ir n)
	  (l (+ (lsh n -1) 1))
	  (i 0) 
	  (j 0)
	  (rra 0.0))
      (catch 'return
	(while #t
	  (cond ((> l 1)
		 (setq rra (aref ra (setq l (- l 1)))))
		(t
		 (setq rra (aref ra ir))
		 (aset ra ir (aref ra 1))
		 (setq ir (- ir 1))
		 (cond ((= ir 1)
			(aset ra 1 rra)
			(throw 'return)))))
	  (setq i l)
	  (setq j (lsh l 1))
	  (while (<= j ir)
	    (cond ((and (< j ir) (< (aref ra j) (aref ra (+ j 1))))
		   (setq j (+ j 1))))
	    (cond ((< rra (aref ra j))
		   (aset ra i (aref ra j))
		   (setq j (+ j (setq i j))))
		  (t
		   (setq j (+ ir 1)))))
	  (aset ra i rra)))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (last (+ n 1))
	 (ary (make-vector last 0)))
    (do ((i 1 (+ i 1)))
	((= i last))
      (aset ary i (gen_random 1.0)))
    (heapsort n ary)
    (let ((result (aref ary n)))
      (setq result (/ (round (* result 10000000000)) 10000000000))
      (format standard-output "%12d\n" result))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: hello.rep,v 1.1 2004-05-28 06:57:55 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)
  (princ "hello world\n"))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: matrix.rep,v 1.1 2004-05-28 06:59:16 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (define size 30)

  (define (mkmatrix rows cols)
    (let ((mx (make-vector rows 0))
	  (count 1))
      (do ((i 0 (1+ i)))
	  ((= i rows))
	(let ((row (make-vector cols 0)))
	  (do ((j 0 (1+ j)))
	      ((= j cols))
	    (aset row j count)
	    (setq count (+ count 1)))
	  (aset mx i row)))
      mx))

  (define (num-cols mx)
    (let ((row (aref mx 0)))
      (length row)))

  (define (num-rows mx)
    (length mx))

  (define (mmult rows cols m1 m2)
    (let ((m3 (make-vector rows 0)))
      (do ((i 0 (1+ i)))
	  ((= i rows))
	(let ((m1i (aref m1 i))
	      (row (make-vector cols 0)))
	  (do ((j 0 (1+ j)))
	      ((= j cols))
	    (let ((val 0))
	      (do ((k 0 (1+ k)))
		  ((= k cols))
		(setq val (+ val (* (aref m1i k)
				    (aref (aref m2 k) j)))))
	      (aset row j val)))
	  (aset m3 i row)))
      m3))

  (define (matrix-print m)
    (do ((i 0 (1+ i)))
	((= i (num-rows m)))
      (let ((row (aref m i)))
	(do ((j 0 (1+ j)))
	    ((= j (num-cols m)))
	  (princ (aref row j))
	  (if (< j (num-cols m))
	      (princ " ")))
	(princ "\n"))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (let ((mm 0)
	  (m1 (mkmatrix size size))
	  (m2 (mkmatrix size size)))
      (let loop ((iter n))
	(cond ((> iter 0)
	       (setq mm (mmult size size m1 m2))
	       (loop (- iter 1)))))
      (let ((r0 (aref mm 0))
	    (r2 (aref mm 2))
	    (r3 (aref mm 3))
	    (r4 (aref mm 4)))
	(princ (aref r0 0))
	(princ " ")
	(princ (aref r2 3))
	(princ " ")
	(princ (aref r3 2))
	(princ " ")
	(princ (aref r4 4))
	(princ "\n")))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: methcall.rep,v 1.1 2004-05-28 07:12:54 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.data.objects)

  (define (print-bool b)
    (format standard-output (if b "true\n" "false\n")))
  
  (define toggle
    (object nil
	    ((new obj state)
	     (put obj 'state state)
	     obj)
	    ((value tog) (get tog 'state))
	    ((activate tog)
	     (put tog 'state (not (get tog 'state)))
	     tog)))

  (define nth-toggle
    (object toggle
	    ((new obj state max)
	     (toggle 'new obj state)
	     (put obj 'count-max max)
	     (put obj 'counter 0)
	     obj)
	    ((activate obj)
	     (let ((c (get obj 'counter)))
	       (if (= (+ c 1) (get obj 'count-max))
		   (progn
		     (put obj 'state (not (get obj 'state)))
		     (put obj 'counter 0))
		 (put obj 'counter (+ c 1)))
	       obj))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (let ((tog (toggle 'new 'my-tog 't))
	  (val 't))
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(setq val (toggle 'value (toggle 'activate tog))))
      (print-bool val))

    (let ((ntog (nth-toggle 'new 'my-ntog 't 3))
	  (val 't))
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(setq val (nth-toggle 'value (nth-toggle 'activate ntog))))
      (print-bool val))))

#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; TBD: figure out how to format results better

;;; $Id: moments.rep,v 1.1 2004-05-28 07:00:24 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.regexp)

  ;; I can't think of an easier way to format a floating point number
  ;; and be able to specify number of digits following decimal point.
  (define (fltfmt decpts number)
    (let* ((x (expt 10 decpts))
	   (pad (format #f "%d" x))
	   (numlist (string-split "\\." (format #f "%d" (/ (round (* number x)) x))))
	   (zeros (substring pad (- (length pad) (- decpts (length (cadr numlist))))))
	   (numstr (concat (car numlist) "." (cadr numlist) zeros)))
      numstr))

  ;; eat the unused command line arg
  (get-command-line-option "--num" t)

  (let* ((sum 0.0)
	 (numlist (let loop ((line (read-line))
			     (numlist '()))
		       (if (not line)
			   numlist
			 (let ((num (read-from-string line)))
			   (setq sum (+ num sum))
			   (loop (read-line) (cons num numlist)))))))
    (let ((n (length numlist)))
      (let ((mean (/ sum n))
	    (average_deviation 0.0)
	    (standard_deviation 0.0)
	    (variance 0.0)
	    (skew 0.0)
	    (kurtosis 0.0)
	    (median 0.0)
	    (deviation 0.0))
	(let loop ((nums numlist))
	     (if (not (null nums))
		 (progn
		   (setq deviation (- (car nums) mean))
		   (setq average_deviation (+ average_deviation (abs deviation)))
		   (setq variance (+ variance (expt deviation 2.0)))
		   (setq skew (+ skew (expt deviation 3.0)))
		   (setq kurtosis (+ kurtosis (expt deviation 4)))
		   (loop (cdr nums)))))

	(setq average_deviation (/ average_deviation n))
	(setq variance (/ variance (1- n)))
	(setq standard_deviation (sqrt variance))

	(cond ((> variance 0.0)
	       (setq skew (/ skew (* n variance standard_deviation)))
	       (setq kurtosis (- (/ kurtosis (* n variance variance))
				 3.0))))

	(setq numlist (sort numlist))
	(let ((mid (/ n 2)))
	  (if (zerop (mod n 2))
	      (setq median (/ (+ (elt numlist mid)
				 (elt numlist (1- mid)))
			      2.0))
	    (setq median (elt numlist mid))))
      
	
	(setq standard_deviation (/ (round (* standard_deviation 1000000)) 1000000))

	(format standard-output "n:                  %d\n" n)
	(format standard-output "median:             %s\n" (fltfmt 6 median))
	(format standard-output "mean:               %s\n" (fltfmt 6 mean))
	(format standard-output "average_deviation:  %s\n" (fltfmt 6 average_deviation))
	(format standard-output "standard_deviation: %s\n" (fltfmt 6 standard_deviation))
	(format standard-output "variance:           %s\n" (fltfmt 6 variance))
	(format standard-output "skew:               %s\n" (fltfmt 6 skew))
	(format standard-output "kurtosis:           %s\n" (fltfmt 6 kurtosis))))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: nestedloop.rep,v 1.1 2004-05-28 07:14:18 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (x 0))
    (do ((a 0 (+ a 1)))
	((= a n))
      (do ((b 0 (+ b 1)))
	  ((= b n))
	(do ((c 0 (+ c 1)))
	    ((= c n))
	  (do ((d 0 (+ d 1)))
	      ((= d n))
	    (do ((e 0 (+ e 1)))
		((= e n))
	      (do ((f 0 (+ f 1)))
		  ((= f n))
		(setq x (+ x 1))))))))
    (format standard-output "%d\n" x)))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: objinst.rep,v 1.1 2004-05-28 07:19:46 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.data.objects)

  (define (print-bool b)
    (format standard-output (if b "true\n" "false\n")))
  
  (define toggle
    (object nil
	    ((new obj state)
	     (put obj 'state state)
	     obj)
	    ((value tog) (get tog 'state))
	    ((activate tog)
	     (put tog 'state (not (get tog 'state)))
	     tog)))

  (define nth-toggle
    (object toggle
	    ((new obj state max)
	     (toggle 'new obj state)
	     (put obj 'count-max max)
	     (put obj 'counter 0)
	     obj)
	    ((activate obj)
	     (let ((c (get obj 'counter)))
	       (if (= (+ c 1) (get obj 'count-max))
		   (progn
		     (put obj 'state (not (get obj 'state)))
		     (put obj 'counter 0))
		 (put obj 'counter (+ c 1)))
	       obj))))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (let ((tog (toggle 'new 'my-tog 't)))
      (do ((i 0 (+ i 1)))
	  ((= i 5))
	(print-bool (toggle 'value (toggle 'activate tog))))
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(setq tog (toggle 'new 'my-tog 't))))

    (format standard-output "\n")

    (let ((ntog (nth-toggle 'new 'my-ntog 't 3)))
      (do ((i 0 (+ i 1)))
	  ((= i 8))
	(print-bool (nth-toggle 'value (nth-toggle 'activate ntog))))
      (do ((i 0 (+ i 1)))
	  ((= i n))
	(setq ntog (nth-toggle 'new 'my-ntog 't 3))))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0 
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: prodcons.rep,v 1.2 2005-05-13 16:24:18 igouy-guest Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open	rep
	rep.system
	rep.threads
	rep.threads.mutex
	rep.threads.condition-variable)

  (declare (unsafe-for-call/cc))

  (define mutex (make-mutex))
  (define access (make-condition-variable))
  (define count 0)
  (define data -1)
  (define produced 0)
  (define consumed 0)

  (define (consumer n)
    (let ((i 0))
      (while (/= i n)
	(obtain-mutex mutex)
	(while (= count 0)
	  (condition-variable-wait access mutex))
	(setq i data)
	(setq count 0)
	(setq consumed (1+ consumed))
	(condition-variable-signal access)
	(release-mutex mutex))))

  (define (producer n)
    (do ((i 1 (+ i 1)))
	((> i n))
      (obtain-mutex mutex)
      (while (= count 1)
	(condition-variable-wait access mutex))
      (setq data i)
      (setq count 1)
      (setq produced (1+ produced))
      (condition-variable-signal access)
      (release-mutex mutex)))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (string->number arg) 1))
	 (c (make-thread (lambda () (consumer n)))))
    (producer n)
    (thread-join c)
    (format standard-output "%d %d\n" produced consumed)))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: random.rep,v 1.1 2004-05-28 07:28:50 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (define IM     139968)
  (define IA       3877)
  (define IC      29573)
  
  (define LAST 42)
  (define (gen_random max)
    (/ (* max (setq LAST (modulo (+ (* LAST IA) IC) IM))) IM))
  
  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1)))
    (let loop ((iter n))
	 (if (> iter 1)
	     (progn
	       (gen_random 100.0)
	       (loop (- iter 1)))))
    (format standard-output "%^11d\n"
	    (/ (round (* (gen_random 100.0) 1000000000)) 1000000000))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: regexmatch.rep,v 1.1 2004-05-28 07:28:24 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.regexp)

  (defvar regexp (concat
		  "(^|[^0-9\\(])"	; preceeding non-digit or bol
		  "("			; area code
		  "\\(([0-9][0-9][0-9])\\)" ; is either 3 digits in parens
		  "|"			; or
		  "([0-9][0-9][0-9])"	; just 3 digits
		  ")"			; end of area code
		  " "			; area code is followed by one space
		  "([0-9][0-9][0-9])"	; exchange is 3 digits
		  "[ -]"		; separator is either space or dash
		  "([0-9][0-9][0-9][0-9])" ; last 4 digits
		  "[^0-9]"		; must be followed by a non-digit
		  ))

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (phones '()))
    (let ((line))
      (while (setq line (read-line))
	(setq phones (append phones (list line)))))
    (while (> n 0)
      (setq n (1- n))
      (let ((count 0))
	(mapc (lambda (line)
		(if (string-match regexp line)
		    (let ((num (expand-last-match "(\\3\\4) \\5-\\6")))
		      (setq count (1+ count))
		      (if (= 0 n)
			  (format standard-output "%d: %s\n" count num)))))
	      phones)))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: reversefile.rep,v 1.1 2004-05-28 07:28:57 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  ;; eat the unused command line arg
  (get-command-line-option "--num" t)

  (let ((lines '()))
    (let loop ((line (read-line)))
	 (cond ((not line) nil)
	       (t
		(setq lines (cons line lines))
		(loop (read-line)))))
    (let loop ((lines lines))
	 (cond ((not lines) nil)
	       (t
		(princ (car lines))
		(loop (cdr lines)))))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: sieve.rep,v 1.1 2004-05-28 07:34:05 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (let* ((arg (get-command-line-option "--num" t))
	 (num (if arg (read-from-string arg) 1))
	 (count 0))
    (while (> num 0)
      (setq num (1- num))
      (let ((flags (make-vector 8192 t)))
	(setq count 0)
	(do ((i 2 (1+ i)))
	    ((>= i 8192))
	  (if (aref flags i)
	      (progn
	       (do ((k (+ i i) (+ k i)))
		   ((>= k 8192))
		 (aset flags k nil))
	       (setq count (1+ count)))))))
    (format standard-output "Count: %d\n" count)))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: spellcheck.rep,v 1.1 2004-05-28 07:33:09 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep
	rep.system
	rep.io.files
	rep.regexp
	rep.data.tables)
  
  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (dict (make-table string-hash eq-hash))
	 (line ""))
    (let ((dictfile (open-file "Usr.Dict.Words" 'read)))
      (when dictfile
	(unwind-protect
	    (while (setq line (read-line dictfile))
	      (when (string-match "\\S+" line)
		(table-set dict (substring line (match-start) (match-end)) #t)))
	  (close-file dictfile))))
    (while (setq line (read-line))
      (when (string-match "\\S+" line)
	(let ((word (substring line (match-start) (match-end))))
	  (when (not (table-ref dict word))
	    (format standard-output "%s\n" word)))))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: strcat.rep,v 1.1 2004-05-28 07:43:59 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  (define hello "hello
")

  (let* ((arg (get-command-line-option "--num" t))
	 (n (if arg (read-from-string arg) 1))
	 (str ""))
    (do ((i 0 (+ i 1)))
	((= i n))
      (setq str (concat str hello)))
    (format standard-output "%d\n" (length str))))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: sumcol.rep,v 1.1 2004-05-28 07:43:37 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system)

  ;; eat the unused command line arg
  (get-command-line-option "--num" t)
  (let ((sum 0)
	(line))
    (while (setq line (read-line))
      (setq sum (+ sum (read-from-string line))))
    (format standard-output "%d\n" sum)))
#!/bin/bash
# -*- mode: lisp -*-
PROG=${0%.jl}
[ \! -f $PROG.jlc -o $0 -nt $PROG.jlc ] &&
    rep --batch --no-rc -l compiler -f compile-batch $0
exec rep "$PROG.jlc" "$@"
!#

;;; $Id: wc.rep,v 1.1 2004-05-28 07:44:37 bfulgham Exp $
;;; http://www.bagley.org/~doug/shootout/

(define-structure main ()
  (open rep rep.system rep.regexp)

  (defun my-string-split (regexp string)
    "Return a list of substrings of STRING, each delimited by REGEXP.
null-strings are removed."
    (let loop ((point 0)
	       (parts '()))
	 (if (string-match regexp string point)
	     (loop (match-end)
	       (if (< point (match-start))
		   (cons (substring string point (match-start)) parts)
		 parts))
	   (let ((part (substring string point)))
	     (if (> (length part) 0)
		 (cons part parts)
	       parts)))))

  ;; eat the unused command line arg
  (get-command-line-option "--num" t)
  (let ((nl 0)
	(nw 0)
	(nc 0)
	(line))
    (while (setq line (read-line))
      (setq nl (+ nl 1))
      (setq nw (+ nw (length (my-string-split "[ \t\n]+" line))))
      (setq nc (+ nc (length line))))
    (format standard-output "%d %d %d\n" nl nw nc)))


